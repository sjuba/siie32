/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SFormUnit.java
 *
 * Created on 24/08/2009, 03:21:10 PM
 */

package erp.mitm.form;

import erp.data.SDataConstants;
import erp.data.SDataUtilities;
import erp.data.SProcConstants;
import erp.lib.SLibConstants;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mitm.data.SDataUnit;
import erp.mitm.data.SDataUnitType;
import erp.mod.SModConsts;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;
import sa.lib.SLibConsts;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiUtils;

/**
 *
 * @author Alfonso Flores, Juan Barajas
 */
public class SFormUnit extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mitm.data.SDataUnit moUnit;
    private erp.lib.form.SFormField moFieldFkUnitTypeId;
    private erp.lib.form.SFormField moFieldFkCfdUnitId;
    private erp.lib.form.SFormField moFieldUnit;
    private erp.lib.form.SFormField moFieldSymbol;
    private erp.lib.form.SFormField moFieldUnitBaseEquivalence;
    private erp.lib.form.SFormField moFieldSortingPosition;
    private erp.lib.form.SFormField moFieldIsDeleted;

    /** Creates new form SFormUnit */
    public SFormUnit(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient =  client;
        mnFormType = SDataConstants.ITMU_UNIT;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpRegistry = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlFkUnitTypeId = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jbFkUnitTypeId = new javax.swing.JButton();
        jcbFkUnitTypeId = new javax.swing.JComboBox();
        jlFkCfdUnitId = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        moKeyCfdUnitId = new sa.lib.gui.bean.SBeanFieldKey();
        jlUnit = new javax.swing.JLabel();
        jtfUnit = new javax.swing.JTextField();
        jlSymbol = new javax.swing.JLabel();
        jtfSymbol = new javax.swing.JTextField();
        jlUnitBaseEquivalence = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jtfUnitBaseEquivalence = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jtfUnitTypeBase = new javax.swing.JTextField();
        jlSortingPosition = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jtfSortingPosition = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jckIsDeleted = new javax.swing.JCheckBox();
        jpCommand = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Unidad");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpRegistry.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpRegistry.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.GridLayout(7, 2, 5, 5));

        jlFkUnitTypeId.setText("Tipo de unidad: *");
        jPanel3.add(jlFkUnitTypeId);

        jPanel6.setLayout(new java.awt.BorderLayout(5, 0));

        jbFkUnitTypeId.setText("jButton1");
        jbFkUnitTypeId.setToolTipText("Seleccionar tipo de unidad");
        jbFkUnitTypeId.setFocusable(false);
        jbFkUnitTypeId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel6.add(jbFkUnitTypeId, java.awt.BorderLayout.EAST);

        jcbFkUnitTypeId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbFkUnitTypeId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbFkUnitTypeIdItemStateChanged(evt);
            }
        });
        jPanel6.add(jcbFkUnitTypeId, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel6);

        jlFkCfdUnitId.setText("Unidad SAT: *");
        jPanel3.add(jlFkCfdUnitId);

        jPanel7.setLayout(new java.awt.BorderLayout(5, 0));
        jPanel7.add(moKeyCfdUnitId, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel7);

        jlUnit.setText("Nombre de unidad: *");
        jPanel3.add(jlUnit);

        jtfUnit.setText("TEXT");
        jPanel3.add(jtfUnit);

        jlSymbol.setText("Símbolo de unidad: *");
        jPanel3.add(jlSymbol);

        jtfSymbol.setText("TEXT");
        jPanel3.add(jtfSymbol);

        jlUnitBaseEquivalence.setText("Equivalencia en la unidad base: *");
        jPanel3.add(jlUnitBaseEquivalence);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jtfUnitBaseEquivalence.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfUnitBaseEquivalence.setText("0.0000");
        jtfUnitBaseEquivalence.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel4.add(jtfUnitBaseEquivalence);

        jLabel1.setPreferredSize(new java.awt.Dimension(5, 23));
        jLabel1.setRequestFocusEnabled(false);
        jPanel4.add(jLabel1);

        jtfUnitTypeBase.setEditable(false);
        jtfUnitTypeBase.setText("TEXT");
        jtfUnitTypeBase.setFocusable(false);
        jtfUnitTypeBase.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel4.add(jtfUnitTypeBase);

        jPanel3.add(jPanel4);

        jlSortingPosition.setText("Posición de ordenamiento: *");
        jPanel3.add(jlSortingPosition);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jtfSortingPosition.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfSortingPosition.setText("0");
        jtfSortingPosition.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel1.add(jtfSortingPosition);

        jPanel3.add(jPanel1);
        jPanel3.add(jLabel2);

        jckIsDeleted.setForeground(java.awt.Color.red);
        jckIsDeleted.setText("Registro eliminado");
        jPanel3.add(jckIsDeleted);

        jpRegistry.add(jPanel3, java.awt.BorderLayout.NORTH);

        getContentPane().add(jpRegistry, java.awt.BorderLayout.CENTER);

        jpCommand.setPreferredSize(new java.awt.Dimension(400, 33));
        jpCommand.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jpCommand.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jpCommand.add(jbCancel);

        getContentPane().add(jpCommand, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(416, 289));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jcbFkUnitTypeIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbFkUnitTypeIdItemStateChanged
        if (!mbResetingForm) {
            if (evt.getStateChange() == ItemEvent.SELECTED) {
                readUnitBase();
            }
        }
    }//GEN-LAST:event_jcbFkUnitTypeIdItemStateChanged

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();

        moFieldFkUnitTypeId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkUnitTypeId, jlFkUnitTypeId);
        moFieldFkUnitTypeId.setPickerButton(jbFkUnitTypeId);
        moFieldFkCfdUnitId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, moKeyCfdUnitId.getComponent(), jlFkCfdUnitId);
        moKeyCfdUnitId.setKeySettings((SGuiClient) miClient, SGuiUtils.getLabelName(jlFkCfdUnitId.getText()), true);
        moFieldUnit = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfUnit, jlUnit);
        moFieldUnit.setLengthMax(50);
        moFieldSymbol = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfSymbol, jlSymbol);
        moFieldSymbol.setLengthMax(10);
        moFieldSymbol.setAutoCaseType(SLibConstants.UNDEFINED);
        moFieldUnitBaseEquivalence = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfUnitBaseEquivalence, jlUnitBaseEquivalence);
        moFieldUnitBaseEquivalence.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsBaseEquivalenceFormat());
        moFieldSortingPosition = new SFormField(miClient, SLibConstants.DATA_TYPE_INTEGER, true, jtfSortingPosition, jlSortingPosition);
        moFieldIsDeleted = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsDeleted);

        mvFields.add(moFieldFkUnitTypeId);
        mvFields.add(moFieldFkCfdUnitId);
        mvFields.add(moFieldUnit);
        mvFields.add(moFieldSymbol);
        mvFields.add(moFieldUnitBaseEquivalence);
        mvFields.add(moFieldSortingPosition);
        mvFields.add(moFieldIsDeleted);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbFkUnitTypeId.addActionListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction action = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), action, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jcbFkUnitTypeId.requestFocus();
        }
    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    private void actionFkUnitTypeId() {
        miClient.pickOption(SDataConstants.ITMU_TP_UNIT, moFieldFkUnitTypeId, null);
    }

    private void readUnitBase() {
        String unit = "";
        SDataUnitType type = null;

        if (moFieldFkUnitTypeId.getKeyAsIntArray()[0] > 0) {
            type = (SDataUnitType) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_TP_UNIT, moFieldFkUnitTypeId.getKeyAsIntArray(), SLibConstants.EXEC_MODE_SILENT);

            unit = type.getUnitBase();
        }
        else {
            unit = "";
        }

        jtfUnitTypeBase.setText(unit);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbFkUnitTypeId;
    private javax.swing.JButton jbOk;
    private javax.swing.JComboBox jcbFkUnitTypeId;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JLabel jlFkCfdUnitId;
    private javax.swing.JLabel jlFkUnitTypeId;
    private javax.swing.JLabel jlSortingPosition;
    private javax.swing.JLabel jlSymbol;
    private javax.swing.JLabel jlUnit;
    private javax.swing.JLabel jlUnitBaseEquivalence;
    private javax.swing.JPanel jpCommand;
    private javax.swing.JPanel jpRegistry;
    private javax.swing.JTextField jtfSortingPosition;
    private javax.swing.JTextField jtfSymbol;
    private javax.swing.JTextField jtfUnit;
    private javax.swing.JTextField jtfUnitBaseEquivalence;
    private javax.swing.JTextField jtfUnitTypeBase;
    private sa.lib.gui.bean.SBeanFieldKey moKeyCfdUnitId;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moUnit = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        jtfUnitTypeBase.setText("");
        jckIsDeleted.setEnabled(false);
        mbResetingForm = false;
    }

    @Override
    public void formRefreshCatalogues() {
        mbResetingForm = true;
        SFormUtilities.populateComboBox(miClient, jcbFkUnitTypeId, SDataConstants.ITMU_TP_UNIT);
        miClient.getSession().populateCatalogue(moKeyCfdUnitId, SModConsts.ITMS_CFD_UNIT, SLibConsts.UNDEFINED, null);
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            Object[] oParamsIn = new Object[] { moUnit == null ? 0 : moUnit.getPkUnitId(), moFieldUnit.getString(), moFieldFkUnitTypeId.getKeyAsIntArray()[0] };

            if (SDataUtilities.callProcedureVal(miClient, SProcConstants.ITMU_UNIT_VAL, oParamsIn, SLibConstants.EXEC_MODE_VERBOSE) > 0) {
                validation.setMessage("El valor del campo '" + jlUnit.getText() + "' ya existe.");
                validation.setComponent(jtfUnit);
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        moUnit = (SDataUnit) registry;

        moFieldFkUnitTypeId.setFieldValue(new int[] { moUnit.getFkUnitTypeId() });
        moKeyCfdUnitId.setValue(new int[] { moUnit.getFkCfdUnitId() });
        moFieldUnit.setFieldValue(moUnit.getUnit());
        moFieldSymbol.setFieldValue(moUnit.getSymbol());
        moFieldUnitBaseEquivalence.setFieldValue(moUnit.getUnitBaseEquivalence());
        moFieldSortingPosition.setFieldValue(moUnit.getSortingPosition());
        moFieldIsDeleted.setFieldValue(moUnit.getIsDeleted());

        readUnitBase();

        if (moUnit.getIsCanDelete()) {
            jckIsDeleted.setEnabled(true);
        }
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        if (moUnit == null) {
            moUnit = new SDataUnit();
            moUnit.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        }
        else {
            moUnit.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        }

        moUnit.setFkUnitTypeId(moFieldFkUnitTypeId.getKeyAsIntArray()[0]);
        moUnit.setFkCfdUnitId(moKeyCfdUnitId.getValue()[0]);
        moUnit.setUnit(moFieldUnit.getString());
        moUnit.setSymbol(moFieldSymbol.getString());
        moUnit.setUnitBaseEquivalence(moFieldUnitBaseEquivalence.getDouble());
        moUnit.setSortingPosition(moFieldSortingPosition.getInteger());
        moUnit.setUnit(moFieldUnit.getString());
        moUnit.setIsCanEdit(true);
        moUnit.setIsCanDelete(true);
        moUnit.setIsDeleted(moFieldIsDeleted.getBoolean());

        return moUnit;
    }

    @Override
    public void setValue(int type, Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbFkUnitTypeId) {
                actionFkUnitTypeId();
            }
        }
    }
}

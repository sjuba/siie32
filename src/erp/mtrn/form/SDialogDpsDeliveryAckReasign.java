/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mtrn.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.lib.SLibConstants;
import erp.lib.data.SDataRegistry;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mtrn.data.SDataDps;
import erp.mtrn.data.STrnDeliveryAckUtilities;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import javax.swing.JButton;
import javax.swing.JLabel;
import sa.lib.SLibUtils;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;

/**
 *
 * @author Daniel LÃ³pez
 */
public class SDialogDpsDeliveryAckReasign extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {
    
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mtrn.form.SPanelDps moPanelDps;
    private erp.mtrn.form.SDialogPickerDps moDialogPickerDps;
    private erp.mtrn.data.SDataDps moParamDpsOrigin;
    private erp.mtrn.data.SDataDps moDpsDestiny;
    
    /**
     * Creates new form SDialogDpsDeliveryAckReasign
     */
    public SDialogDpsDeliveryAckReasign(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        
        initComponents();
        initComponentsExtra();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpDps = new javax.swing.JPanel();
        jlPanelDps = new javax.swing.JLabel();
        jpPicker = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jlDps = new javax.swing.JLabel();
        jtfDps = new javax.swing.JTextField();
        jbPickDps = new javax.swing.JButton();
        jpControls = new javax.swing.JPanel();
        jbSave = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Reasignar acuse(s) de entrega");
        setMinimumSize(new java.awt.Dimension(357, 186));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpDps.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpDps.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        jpDps.setMinimumSize(new java.awt.Dimension(357, 153));
        jpDps.setPreferredSize(new java.awt.Dimension(881, 339));
        jpDps.setLayout(new java.awt.BorderLayout());

        jlPanelDps.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jlPanelDps.setText("[Panel de documento de compras-ventas]");
        jlPanelDps.setPreferredSize(new java.awt.Dimension(100, 200));
        jpDps.add(jlPanelDps, java.awt.BorderLayout.NORTH);

        jpPicker.setBorder(javax.swing.BorderFactory.createTitledBorder("Seleccionar factura:"));
        jpPicker.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        jpPicker.setMinimumSize(new java.awt.Dimension(345, 113));
        jpPicker.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING));

        jlDps.setText("Factura destino:*");
        jlDps.setMaximumSize(new java.awt.Dimension(84, 14));
        jlDps.setMinimumSize(new java.awt.Dimension(84, 14));
        jlDps.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel1.add(jlDps);

        jtfDps.setEditable(false);
        jtfDps.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jtfDps.setToolTipText("Factura seleccionada...");
        jtfDps.setEnabled(false);
        jtfDps.setPreferredSize(new java.awt.Dimension(150, 23));
        jtfDps.setSelectionEnd(6);
        jtfDps.setSelectionStart(6);
        jPanel1.add(jtfDps);

        jbPickDps.setText("...");
        jbPickDps.setToolTipText("Seleccionar factura destino...");
        jbPickDps.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel1.add(jbPickDps);

        jpPicker.add(jPanel1, java.awt.BorderLayout.NORTH);

        jpDps.add(jpPicker, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpDps, java.awt.BorderLayout.CENTER);

        jpControls.setMinimumSize(new java.awt.Dimension(161, 33));
        jpControls.setPreferredSize(new java.awt.Dimension(392, 33));
        jpControls.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbSave.setText("Guardar");
        jbSave.setPreferredSize(new java.awt.Dimension(75, 23));
        jpControls.add(jbSave);

        jbCancel.setText("Cancelar");
        jpControls.add(jbCancel);

        getContentPane().add(jpControls, java.awt.BorderLayout.PAGE_END);

        setSize(new java.awt.Dimension(800, 500));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        moPanelDps = new SPanelDps(miClient);
        jpDps.remove(jlPanelDps);
        jpDps.add(moPanelDps, BorderLayout.NORTH);

        moDialogPickerDps = new SDialogPickerDps(miClient, SDataConstants.TRN_DPS_ACK);
        
        jbPickDps.addActionListener(this);
        jbSave.addActionListener(this);
        jbCancel.addActionListener(this);
        
        SFormUtilities.createActionMap(rootPane, this, "publicActionSave", "save", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "publicActionCancel", "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    /**
     * @param args the command line arguments
     */
    private void actionPickDps() {
        Object[] filterKey = new Object[] { SDataConstantsSys.TRNS_CL_DPS_SAL_DOC, new int[] {moParamDpsOrigin.getFkBizPartnerAltId_r()} };
        
        moDialogPickerDps.formReset();
        moDialogPickerDps.setFilterKey(filterKey);
        moDialogPickerDps.formRefreshOptionPane();
        moDialogPickerDps.setFormVisible(true);
        
        if (moDialogPickerDps.getFormResult() == SLibConstants.FORM_RESULT_OK) {
            try {
                moDpsDestiny = new SDataDps();
                if (moDpsDestiny.read(moDialogPickerDps.getSelectedPrimaryKey(), miClient.getSession().getDatabase().getConnection().createStatement()) == SLibConstants.DB_ACTION_READ_OK){
                    if (SLibUtils.compareKeys(moParamDpsOrigin.getPrimaryKey(), moDpsDestiny.getPrimaryKey())) {
                        moDpsDestiny = null;
                        miClient.showMsgBoxInformation("No se puede reasignar los acuses de entrega a la misma factura.");
                    }
                }
            }
            catch (SQLException ex) {
                SLibUtils.showException(this, ex);
            }
            
            jtfDps.setText(moDpsDestiny == null ? "" : moDpsDestiny.getDpsNumber());
        }
    }

    private void actionSave() {
        if (moDpsDestiny == null) {
            miClient.showMsgBoxWarning(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlDps) + "'.");
            jbPickDps.requestFocus();
        }
        else {
            try {
                STrnDeliveryAckUtilities.reasignFiles(miClient, (int[]) moParamDpsOrigin.getPrimaryKey(), (int[]) moDpsDestiny.getPrimaryKey());
            } 
            catch (Exception e) {
                SLibUtils.showException(this, e);
            }
            
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }
    
        private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
        }
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbPickDps;
    private javax.swing.JButton jbSave;
    private javax.swing.JLabel jlDps;
    private javax.swing.JLabel jlPanelDps;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpDps;
    private javax.swing.JPanel jpPicker;
    private javax.swing.JTextField jtfDps;
    // End of variables declaration//GEN-END:variables

    public void publicActionSave() {
        actionSave();
    }
    
    public void publicActionCancel() {
        actionCancel();
    }
    
    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moParamDpsOrigin = null;
        moDpsDestiny = null;
        jtfDps.setText("");
    }

    @Override
    public void formRefreshCatalogues() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public SFormValidation formValidate() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(SDataRegistry registry) {
        moParamDpsOrigin = (SDataDps) registry;
        moPanelDps.setDps(moParamDpsOrigin, null);
    }

    @Override
    public SDataRegistry getRegistry() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setValue(int type, Object value) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            JButton button = (javax.swing.JButton) e.getSource();
            if (button == jbPickDps) {
                actionPickDps();
            }
            else if (button == jbSave) {
                actionSave();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
        }
    }
}

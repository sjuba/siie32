/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mtrn.form;

import erp.lib.SLibConstants;
import erp.lib.data.SDataRegistry;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STablePane;
import erp.mcfg.data.SDataParamsCompany;
import erp.mtrn.data.SDataDps;
import erp.mtrn.data.SDataDpsDeliveryAck;
import erp.mtrn.data.SDataDpsDeliveryAckRow;
import erp.mtrn.data.STrnDeliveryAckUtilities;
import java.awt.BorderLayout;
import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JLabel;
import sa.lib.SLibUtils;

/**
 *
 * @author Daniel LÃ³pez
 */
public class SDialogDpsDeliveryAckViewer extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {
    
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mtrn.form.SPanelDps moPanelDps;
    private erp.mtrn.data.SDataDps moParamDps;
    private erp.lib.table.STablePane moPaneDeliveryAck;

    /**
     * Creates new form SDialogDpsDeliveryAckReasign
     * @param client
     */
    public SDialogDpsDeliveryAckViewer(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        
        initComponents();
        initComponentsExtra();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpDps = new javax.swing.JPanel();
        jlPanelDps = new javax.swing.JLabel();
        jpDeliveryAck = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jbOpen = new javax.swing.JButton();
        jpControls = new javax.swing.JPanel();
        jbClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Visualizar acuse(s) de entrega");
        setMinimumSize(new java.awt.Dimension(357, 186));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpDps.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpDps.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        jpDps.setMinimumSize(new java.awt.Dimension(357, 153));
        jpDps.setPreferredSize(new java.awt.Dimension(881, 339));
        jpDps.setLayout(new java.awt.BorderLayout());

        jlPanelDps.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jlPanelDps.setText("[Panel de documento de compras-ventas]");
        jlPanelDps.setPreferredSize(new java.awt.Dimension(100, 200));
        jpDps.add(jlPanelDps, java.awt.BorderLayout.NORTH);

        jpDeliveryAck.setBorder(javax.swing.BorderFactory.createTitledBorder("Seleccionar acuse:"));
        jpDeliveryAck.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        jpDeliveryAck.setMinimumSize(new java.awt.Dimension(345, 113));
        jpDeliveryAck.setPreferredSize(new java.awt.Dimension(305, 56));
        jpDeliveryAck.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        jbOpen.setText("Abrir");
        jbOpen.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbOpen);

        jpDeliveryAck.add(jPanel1, java.awt.BorderLayout.NORTH);

        jpDps.add(jpDeliveryAck, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpDps, java.awt.BorderLayout.CENTER);

        jpControls.setMinimumSize(new java.awt.Dimension(161, 33));
        jpControls.setPreferredSize(new java.awt.Dimension(392, 33));
        jpControls.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbClose.setText("Cerrar");
        jbClose.setPreferredSize(new java.awt.Dimension(75, 23));
        jpControls.add(jbClose);

        getContentPane().add(jpControls, java.awt.BorderLayout.PAGE_END);

        setSize(new java.awt.Dimension(800, 500));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        int i = 0;
        STableColumnForm tableColumnsDeliveryAck[];

        moPanelDps = new SPanelDps(miClient);
        jpDps.remove(jlPanelDps);
        jpDps.add(moPanelDps, BorderLayout.NORTH);

        moPaneDeliveryAck = new STablePane(miClient);
        jpDeliveryAck.add(moPaneDeliveryAck, BorderLayout.CENTER);

        tableColumnsDeliveryAck = new STableColumnForm[1];
        tableColumnsDeliveryAck[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Nombre de acuse", 500);

        for (i = 0; i < tableColumnsDeliveryAck.length; i++) {
            moPaneDeliveryAck.addTableColumn(tableColumnsDeliveryAck[i]);
        }

        moPaneDeliveryAck.createTable();
        moPaneDeliveryAck.setDoubleClickAction(this, "doubleClickPaneDeliveryAck");
        
        jbOpen.addActionListener(this);
        jbClose.addActionListener(this);

        SFormUtilities.createActionMap(rootPane, this, "publicActionView", "view", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "publicActionClose", "close", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jbClose.requestFocus();
        }
    }

    private void setFiles() {
        ArrayList<SDataDpsDeliveryAck> dpsDeliveryAcks = new ArrayList<>();
        
        try {
            dpsDeliveryAcks = STrnDeliveryAckUtilities.getDpsDeliveryAcks(miClient, (int[]) moParamDps.getPrimaryKey());
        } 
        catch (Exception ex) {
            SLibUtils.showException(this, ex);
        }

        if (dpsDeliveryAcks.isEmpty()) {
            miClient.showMsgBoxInformation("El documento no cuenta con acuses de entrega.");
        }
        else {
            moPaneDeliveryAck.clearTableRows();
            for (SDataDpsDeliveryAck ack : dpsDeliveryAcks) {
                moPaneDeliveryAck.addTableRow(new SDataDpsDeliveryAckRow(ack));
            }
            
            moPaneDeliveryAck.renderTableRows();
            
            if (!dpsDeliveryAcks.isEmpty()) {
                moPaneDeliveryAck.getTable().setRowSelectionInterval(0, 0);
            }
        }
    }

    private void actionView() throws SQLException {
        if (moPaneDeliveryAck.getSelectedTableRow() == null) {
            miClient.showMsgBoxInformation(SLibConstants.MSG_ERR_GUI_ROW_UNDEF);
        }
        else {
            SDataDpsDeliveryAck deliveryAck = new SDataDpsDeliveryAck();
            
            deliveryAck.read(moPaneDeliveryAck.getSelectedTableRow().getRowPrimaryKey(), miClient.getSession().getStatement());

            File fileNameSystem = new File(SDataParamsCompany.FILES_DIR + "\\" + deliveryAck.getNameSystem());
            
            try {
                Desktop.getDesktop().open(fileNameSystem);
            } 
            catch (IOException ex) {
                SLibUtils.showException(this, ex);
            }
        }
    }
    
    private void actionClose() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jbClose;
    private javax.swing.JButton jbOpen;
    private javax.swing.JLabel jlPanelDps;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpDeliveryAck;
    private javax.swing.JPanel jpDps;
    // End of variables declaration//GEN-END:variables
    
    public void publicActionView() throws SQLException {
        actionView();
    }
    
    public void publicActionClose() {
        actionClose();
    }

    public void doubleClickPaneDeliveryAck() {
        try {
            actionView();
        } 
        catch (SQLException ex) {
            SLibUtils.showException(this, ex);
        }
    }
    
    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;
        moParamDps = null;
    }

    @Override
    public void formRefreshCatalogues() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(SDataRegistry registry) {
        moParamDps = (SDataDps) registry;
        moPanelDps.setDps(moParamDps, null);
        setFiles();
    }

    @Override
    public SDataRegistry getRegistry() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setValue(int type, Object value) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            JButton button = (javax.swing.JButton) e.getSource();
            if (button == jbOpen) {
                try {
                    actionView();
                } 
                catch (SQLException ex) {
                    SLibUtils.showException(this, ex);
                }
            }
            else if (button == jbClose) {
                actionClose();
            }
        }
    }
}

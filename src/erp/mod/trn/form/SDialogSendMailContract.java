/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.trn.form;

import erp.client.SClientInterface;
import erp.data.SDataConstantsSys;
import erp.lib.SLibUtilities;
import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.cfg.db.SDbMms;
import erp.mtrn.data.STrnUtilities;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import javax.swing.JRadioButton;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import sa.lib.SLibConsts;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;

/**
 *
 * @author Juan Barajas
 */
public class SDialogSendMailContract extends sa.lib.gui.bean.SBeanFormDialog implements ChangeListener {

    private SClientInterface miClient_XXX;
    private ArrayList<String> recipientsTo;
    private ArrayList<String> recipientsCc;
    private ArrayList<String> recipientsBcc;
    
    /**
     * Creates new form SDialogSendMailContract
     */
    public SDialogSendMailContract(SGuiClient client, SClientInterface client_xxx, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.TRNX_DPS_CON_SEND, SLibConsts.UNDEFINED, title);

        miClient_XXX = client_xxx;
        
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgRadios = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jlSendMailByDpsId = new javax.swing.JLabel();
        moRadioSendMailByDate = new sa.lib.gui.bean.SBeanFieldRadio();
        jPanel14 = new javax.swing.JPanel();
        jlSendMailByDate = new javax.swing.JLabel();
        moRadioSendMailByDpsNumber = new sa.lib.gui.bean.SBeanFieldRadio();
        jPanel5 = new javax.swing.JPanel();
        jlDateStart = new javax.swing.JLabel();
        moDateStart = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel7 = new javax.swing.JPanel();
        jlDateEnd = new javax.swing.JLabel();
        moDateEnd = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel13 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlNumberStart = new javax.swing.JLabel();
        moIntNumberStart = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel6 = new javax.swing.JPanel();
        jlNumberEnd = new javax.swing.JLabel();
        moIntNumberEnd = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel8 = new javax.swing.JPanel();
        jlRecipientsTo = new javax.swing.JLabel();
        moTextRecipientsTo = new sa.lib.gui.bean.SBeanFieldText();
        jPanel9 = new javax.swing.JPanel();
        jlRecipientsCc = new javax.swing.JLabel();
        moTextRecipientsCc = new sa.lib.gui.bean.SBeanFieldText();
        jPanel10 = new javax.swing.JPanel();
        jlRecipientsBcc = new javax.swing.JLabel();
        moTextRecipientsBcc = new sa.lib.gui.bean.SBeanFieldText();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuración de reporte:"));
        jPanel1.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel2.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel12.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel11.setLayout(new java.awt.GridLayout(2, 0));

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSendMailByDpsId.setText("Rango de fechas");
        jlSendMailByDpsId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlSendMailByDpsId);

        bgRadios.add(moRadioSendMailByDate);
        moRadioSendMailByDate.setSelected(true);
        jPanel15.add(moRadioSendMailByDate);

        jPanel11.add(jPanel15);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSendMailByDate.setText("Número de folios");
        jlSendMailByDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlSendMailByDate);

        bgRadios.add(moRadioSendMailByDpsNumber);
        jPanel14.add(moRadioSendMailByDpsNumber);

        jPanel11.add(jPanel14);

        jPanel12.add(jPanel11, java.awt.BorderLayout.NORTH);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateStart.setText("Fecha inicial:*");
        jlDateStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlDateStart);
        jPanel5.add(moDateStart);

        jPanel12.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateEnd.setText("Fecha final:*");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlDateEnd);
        jPanel7.add(moDateEnd);

        jPanel12.add(jPanel7, java.awt.BorderLayout.PAGE_END);

        jPanel2.add(jPanel12, java.awt.BorderLayout.NORTH);

        jPanel13.setLayout(new java.awt.GridLayout(5, 0, 0, 5));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNumberStart.setText("Folio inicial:*");
        jlNumberStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlNumberStart);
        jPanel4.add(moIntNumberStart);

        jPanel13.add(jPanel4);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNumberEnd.setText("Folio final:*");
        jlNumberEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlNumberEnd);
        jPanel6.add(moIntNumberEnd);

        jPanel13.add(jPanel6);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlRecipientsTo.setText("Para:*");
        jlRecipientsTo.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlRecipientsTo);

        moTextRecipientsTo.setText("sBeanFieldText3");
        moTextRecipientsTo.setToolTipText("Ejemplo: correo-e1;correo-e2...");
        moTextRecipientsTo.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel8.add(moTextRecipientsTo);

        jPanel13.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlRecipientsCc.setText("CC:");
        jlRecipientsCc.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlRecipientsCc);

        moTextRecipientsCc.setText("sBeanFieldText3");
        moTextRecipientsCc.setToolTipText("Ejemplo: correo-e1; correo-e2...");
        moTextRecipientsCc.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel9.add(moTextRecipientsCc);

        jPanel13.add(jPanel9);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlRecipientsBcc.setText("BCC:");
        jlRecipientsBcc.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlRecipientsBcc);

        moTextRecipientsBcc.setText("sBeanFieldText3");
        moTextRecipientsBcc.setToolTipText("Ejemplo: correo-e1; correo-e2...");
        moTextRecipientsBcc.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel10.add(moTextRecipientsBcc);

        jPanel13.add(jPanel10);

        jPanel2.add(jPanel13, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgRadios;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlDateStart;
    private javax.swing.JLabel jlNumberEnd;
    private javax.swing.JLabel jlNumberStart;
    private javax.swing.JLabel jlRecipientsBcc;
    private javax.swing.JLabel jlRecipientsCc;
    private javax.swing.JLabel jlRecipientsTo;
    private javax.swing.JLabel jlSendMailByDate;
    private javax.swing.JLabel jlSendMailByDpsId;
    private sa.lib.gui.bean.SBeanFieldDate moDateEnd;
    private sa.lib.gui.bean.SBeanFieldDate moDateStart;
    private sa.lib.gui.bean.SBeanFieldInteger moIntNumberEnd;
    private sa.lib.gui.bean.SBeanFieldInteger moIntNumberStart;
    private sa.lib.gui.bean.SBeanFieldRadio moRadioSendMailByDate;
    private sa.lib.gui.bean.SBeanFieldRadio moRadioSendMailByDpsNumber;
    private sa.lib.gui.bean.SBeanFieldText moTextRecipientsBcc;
    private sa.lib.gui.bean.SBeanFieldText moTextRecipientsCc;
    private sa.lib.gui.bean.SBeanFieldText moTextRecipientsTo;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 560, 350);
        SDbMms mms = null;

        moDateStart.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateStart.getText()), false);
        moDateEnd.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateEnd.getText()), false);
        moIntNumberStart.setIntegerSettings(SGuiUtils.getLabelName(jlNumberStart.getText()), SGuiConsts.GUI_TYPE_INT, false);
        moIntNumberEnd.setIntegerSettings(SGuiUtils.getLabelName(jlNumberEnd.getText()), SGuiConsts.GUI_TYPE_INT, false);
        moTextRecipientsTo.setTextSettings(SGuiUtils.getLabelName(jlRecipientsTo.getText()), 250);
        moTextRecipientsCc.setTextSettings(SGuiUtils.getLabelName(jlRecipientsCc.getText()), 250, 0);
        moTextRecipientsBcc.setTextSettings(SGuiUtils.getLabelName(jlRecipientsBcc.getText()), 250, 0);
       
        moTextRecipientsTo.setTextCaseType(SLibConsts.UNDEFINED);
        moTextRecipientsCc.setTextCaseType(SLibConsts.UNDEFINED);
        moTextRecipientsBcc.setTextCaseType(SLibConsts.UNDEFINED);
               
        moFields.addField(moIntNumberStart);
        moFields.addField(moIntNumberEnd);
        moFields.addField(moTextRecipientsTo);
        moFields.addField(moTextRecipientsCc);
        moFields.addField(moTextRecipientsBcc);

        recipientsTo = new ArrayList<String>();
        recipientsCc = new ArrayList<String>();
        recipientsBcc = new ArrayList<String>();
        
        jbSave.setText("Enviar");
        
        moFields.setFormButton(jbSave);
        
        resetForm();
        mms = STrnUtilities.getMms(miClient_XXX, SModSysConsts.CFGS_TP_MMS_CON_SAL);
        
        moTextRecipientsTo.setValue(mms.getRecipientTo());
        moTextRecipientsCc.setValue(mms.getRecipientCarbonCopy());
        moTextRecipientsBcc.setValue(mms.getRecipientBlindCarbonCopy());
        
        actionEnableFields(moRadioSendMailByDate.isSelected());
        addAllListeners();
    }
    
    public void actionEnableFields(boolean enable) {
        moDateStart.setEnabled(enable);
        moDateEnd.setEnabled(enable);
        moIntNumberStart.setEnabled(!enable);
        moIntNumberEnd.setEnabled(!enable);
    }
    
    @Override
    public void resetForm() {
        moDateStart.setValue(new Date());
        moDateEnd.setValue(new Date());
        moIntNumberStart.setValue(0);
        moIntNumberEnd.setValue(0);
        moTextRecipientsTo.setValue("");
        moTextRecipientsCc.setValue("");
        moTextRecipientsBcc.setValue("");
        
        removeAllListeners();
    }
    
    @Override
    public void actionSave() {
        if (jbSave.isEnabled()) {
            if (SGuiUtils.computeValidation(miClient, validateForm())) {
                if (!moRadioSendMailByDate.isSelected()) {
                    STrnUtilities.sendMailContractInfo(miClient_XXX, moIntNumberStart.getValue(), moIntNumberEnd.getValue(), recipientsTo, recipientsCc, recipientsBcc);
                }
                else {
                    STrnUtilities.sendMailDpsSummaryByPeriod(miClient_XXX, SDataConstantsSys.TRNU_TP_DPS_SAL_ORD, moDateStart.getValue(), moDateEnd.getValue(), recipientsTo, recipientsCc, recipientsBcc);
                }
                
                mnFormResult = SGuiConsts.FORM_RESULT_OK;
                dispose();
            }
        }
    }

    @Override
    public void addAllListeners() {
        moRadioSendMailByDate.getComponent().addChangeListener(this);
    }

    @Override
    public void removeAllListeners() {
        moRadioSendMailByDate.getComponent().removeChangeListener(this);
    }

    @Override
    public void reloadCatalogues() {
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        removeAllListeners();
        reloadCatalogues();

        setFormEditable(true);

        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        
        return null;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        String error = "";

        if (validation.isValid()) {
            if (moRadioSendMailByDate.isSelected()) {
                if (moDateEnd.getValue().compareTo(moDateStart.getValue()) < 0) {
                    validation.setComponent(moDateEnd);
                    validation.setMessage("El valor para el campo '" + SGuiUtils.getLabelName(jlDateEnd) + "' no puede ser menor al valor del campo '" + SGuiUtils.getLabelName(jlDateStart) + "'.");
                }
                
            }
            else {
                if (moIntNumberEnd.getValue() < moIntNumberStart.getValue()) {
                    validation.setComponent(moIntNumberEnd);
                    validation.setMessage("El valor para el campo '" + SGuiUtils.getLabelName(jlNumberEnd) + "' no puede ser menor al valor del campo '" + SGuiUtils.getLabelName(jlNumberStart) + "'.");
                }
            }
            if (validation.isValid()) {
                recipientsTo.clear();
                recipientsCc.clear();
                recipientsBcc.clear();

                if (!moTextRecipientsTo.getValue().isEmpty()) {
                    recipientsTo.addAll(Arrays.asList(SLibUtilities.textExplode(moTextRecipientsTo.getValue(), ";")));
                }
                if (!moTextRecipientsCc.getValue().isEmpty()) {
                    recipientsCc.addAll(Arrays.asList(SLibUtilities.textExplode(moTextRecipientsCc.getValue(), ";")));
                }
                if (!moTextRecipientsBcc.getValue().isEmpty()) {
                    recipientsBcc.addAll(Arrays.asList(SLibUtilities.textExplode(moTextRecipientsBcc.getValue(), ";")));
                }

                // Validate email of recipients To:

                for (String email : recipientsTo) {
                    error = SLibUtilities.validateEmail(email);

                    if (error.length() > 0) {
                        validation.setComponent(moTextRecipientsTo);
                        validation.setMessage(error);
                        break;
                    }
                }
                // Validate email of recipients Cc:

                for (String email : recipientsCc) {
                    error = SLibUtilities.validateEmail(email);

                    if (error.length() > 0) {
                        validation.setComponent(moTextRecipientsCc);
                        validation.setMessage(error);
                        break;
                    }
                }
                // Validate email of recipients Bcc:

                for (String email : recipientsBcc) {
                    error = SLibUtilities.validateEmail(email);

                    if (error.length() > 0) {
                        validation.setComponent(moTextRecipientsBcc);
                        validation.setMessage(error);
                        break;
                    }
                }
             
            }
        }
        
        return validation;
    }

    @Override
    public void stateChanged(ChangeEvent e) {
        if (e.getSource() instanceof JRadioButton) {
            actionEnableFields(((JRadioButton) e.getSource()).isSelected());
        }
    }
}
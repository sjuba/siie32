/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.hrs.db.SDbAbsence;
import erp.mod.hrs.db.SDbBenefitTable;
import erp.mod.hrs.db.SDbConfig;
import erp.mod.hrs.db.SDbEmployee;
import erp.mod.hrs.db.SHrsBenefitTableByAnniversary;
import erp.mod.hrs.db.SHrsUtils;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import sa.gui.util.SUtilConsts;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiFieldKeyGroup;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFieldKey;
import sa.lib.gui.bean.SBeanForm;

/**
 *
 * @author Sergio Flores
 */
public class SFormAbsence extends SBeanForm implements ItemListener, FocusListener, ChangeListener {

    protected SDbAbsence moRegistry;
    protected SDbEmployee moEmployee;
    protected SGuiFieldKeyGroup moFieldKeyGroup;
    
    protected int mnWorkingDays;
    protected SDbConfig moConfig;
    protected SDbBenefitTable moBenefitTable;
    protected Date mtDateCutOff;
    protected ArrayList<SHrsBenefitTableByAnniversary> maBenefitTableByAnniversary;

    /**
     * Creates new form SFormAbsence
     * @param client
     * @param title
     */
    public SFormAbsence(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.HRS_ABS, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jlEmployee = new javax.swing.JLabel();
        moKeyEmployee = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel5 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        moDateDate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel6 = new javax.swing.JPanel();
        jlAbsenceClass = new javax.swing.JLabel();
        moKeyAbsenceClass = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel7 = new javax.swing.JPanel();
        jlAbsenceType = new javax.swing.JLabel();
        moKeyAbsenceType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel4 = new javax.swing.JPanel();
        jlNumber = new javax.swing.JLabel();
        moTextNumber = new sa.lib.gui.bean.SBeanFieldText();
        jPanel8 = new javax.swing.JPanel();
        jlDateStart = new javax.swing.JLabel();
        moDateDateStart = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel9 = new javax.swing.JPanel();
        jlDateEnd = new javax.swing.JLabel();
        moDateDateEnd = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel17 = new javax.swing.JPanel();
        jlDateBenefit = new javax.swing.JLabel();
        moDateBenefitDate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel18 = new javax.swing.JPanel();
        jlDateLastHire = new javax.swing.JLabel();
        moDateLastHire = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel11 = new javax.swing.JPanel();
        jlBenefitAnniversary = new javax.swing.JLabel();
        jsAnniversary = new javax.swing.JSpinner();
        moIntBenefitYear = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel15 = new javax.swing.JPanel();
        jlDaysToPaidTable = new javax.swing.JLabel();
        moIntDaysToPaidTable = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel16 = new javax.swing.JPanel();
        jlScheduledDays = new javax.swing.JLabel();
        moIntScheduledDays = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel19 = new javax.swing.JPanel();
        jlPaymentDays = new javax.swing.JLabel();
        moIntPaymentDays = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel10 = new javax.swing.JPanel();
        jlEffectiveDays = new javax.swing.JLabel();
        moIntEffectiveDays = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel12 = new javax.swing.JPanel();
        jlNotes = new javax.swing.JLabel();
        moTextNotes = new sa.lib.gui.bean.SBeanFieldText();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(15, 1, 0, 5));

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEmployee.setForeground(new java.awt.Color(0, 0, 255));
        jlEmployee.setText("Empleado:*");
        jlEmployee.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlEmployee);

        moKeyEmployee.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel14.add(moKeyEmployee);

        jPanel2.add(jPanel14);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDate.setText("Fecha registro:*");
        jlDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlDate);
        jPanel5.add(moDateDate);

        jPanel2.add(jPanel5);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAbsenceClass.setText("Clase incidencia:*");
        jlAbsenceClass.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlAbsenceClass);

        moKeyAbsenceClass.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel6.add(moKeyAbsenceClass);

        jPanel2.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAbsenceType.setText("Tipo incidencia:*");
        jlAbsenceType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlAbsenceType);

        moKeyAbsenceType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel7.add(moKeyAbsenceType);

        jPanel2.add(jPanel7);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNumber.setText("Número o folio:*");
        jlNumber.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlNumber);

        moTextNumber.setText("sBeanFieldText1");
        moTextNumber.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel4.add(moTextNumber);

        jPanel2.add(jPanel4);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateStart.setText("Fecha inicial:*");
        jlDateStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlDateStart);
        jPanel8.add(moDateDateStart);

        jPanel2.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateEnd.setText("Fecha final:*");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlDateEnd);
        jPanel9.add(moDateDateEnd);

        jPanel2.add(jPanel9);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateBenefit.setText("Fecha beneficios:");
        jlDateBenefit.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel17.add(jlDateBenefit);
        jPanel17.add(moDateBenefitDate);

        jPanel2.add(jPanel17);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateLastHire.setText("Fecha última alta:");
        jlDateLastHire.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel18.add(jlDateLastHire);
        jPanel18.add(moDateLastHire);

        jPanel2.add(jPanel18);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBenefitAnniversary.setText("Aniversario:*");
        jlBenefitAnniversary.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlBenefitAnniversary);

        jsAnniversary.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jsAnniversary);

        moIntBenefitYear.setToolTipText("Año aniversario");
        moIntBenefitYear.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel11.add(moIntBenefitYear);

        jPanel2.add(jPanel11);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDaysToPaidTable.setText("Días:");
        jlDaysToPaidTable.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlDaysToPaidTable);
        jPanel15.add(moIntDaysToPaidTable);

        jPanel2.add(jPanel15);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlScheduledDays.setText("Días programados:");
        jlScheduledDays.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jlScheduledDays);
        jPanel16.add(moIntScheduledDays);

        jPanel2.add(jPanel16);

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPaymentDays.setText("Días pagados:");
        jlPaymentDays.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel19.add(jlPaymentDays);
        jPanel19.add(moIntPaymentDays);

        jPanel2.add(jPanel19);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEffectiveDays.setText("Días efectivos:*");
        jlEffectiveDays.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlEffectiveDays);
        jPanel10.add(moIntEffectiveDays);

        jPanel2.add(jPanel10);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNotes.setText("Notas:");
        jlNotes.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlNotes);

        moTextNotes.setText("sBeanFieldText1");
        moTextNotes.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel12.add(moTextNotes);

        jPanel2.add(jPanel12);

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JLabel jlAbsenceClass;
    private javax.swing.JLabel jlAbsenceType;
    private javax.swing.JLabel jlBenefitAnniversary;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlDateBenefit;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlDateLastHire;
    private javax.swing.JLabel jlDateStart;
    private javax.swing.JLabel jlDaysToPaidTable;
    private javax.swing.JLabel jlEffectiveDays;
    private javax.swing.JLabel jlEmployee;
    private javax.swing.JLabel jlNotes;
    private javax.swing.JLabel jlNumber;
    private javax.swing.JLabel jlPaymentDays;
    private javax.swing.JLabel jlScheduledDays;
    private javax.swing.JSpinner jsAnniversary;
    private sa.lib.gui.bean.SBeanFieldDate moDateBenefitDate;
    private sa.lib.gui.bean.SBeanFieldDate moDateDate;
    private sa.lib.gui.bean.SBeanFieldDate moDateDateEnd;
    private sa.lib.gui.bean.SBeanFieldDate moDateDateStart;
    private sa.lib.gui.bean.SBeanFieldDate moDateLastHire;
    private sa.lib.gui.bean.SBeanFieldInteger moIntBenefitYear;
    private sa.lib.gui.bean.SBeanFieldInteger moIntDaysToPaidTable;
    private sa.lib.gui.bean.SBeanFieldInteger moIntEffectiveDays;
    private sa.lib.gui.bean.SBeanFieldInteger moIntPaymentDays;
    private sa.lib.gui.bean.SBeanFieldInteger moIntScheduledDays;
    private sa.lib.gui.bean.SBeanFieldKey moKeyAbsenceClass;
    private sa.lib.gui.bean.SBeanFieldKey moKeyAbsenceType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyEmployee;
    private sa.lib.gui.bean.SBeanFieldText moTextNotes;
    private sa.lib.gui.bean.SBeanFieldText moTextNumber;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 800, 500);

        moFieldKeyGroup = new SGuiFieldKeyGroup(miClient);
        moFieldKeyGroup.addFieldKey(moKeyAbsenceClass, SModConsts.HRSU_CL_ABS, SLibConsts.UNDEFINED, null);
        moFieldKeyGroup.addFieldKey(moKeyAbsenceType, SModConsts.HRSU_TP_ABS, SLibConsts.UNDEFINED, null);

        moKeyEmployee.setKeySettings(miClient, SGuiUtils.getLabelName(jlEmployee.getText()), true);
        moDateDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDate.getText()), true);
        moKeyAbsenceClass.setKeySettings(miClient, SGuiUtils.getLabelName(jlAbsenceClass.getText()), true);
        moKeyAbsenceType.setKeySettings(miClient, SGuiUtils.getLabelName(jlAbsenceType.getText()), true);
        moTextNumber.setTextSettings(SGuiUtils.getLabelName(jlNumber.getText()), 10);
        moDateDateStart.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateStart.getText()), true);
        moDateDateEnd.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateEnd.getText()), true);
        moDateBenefitDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateBenefit.getText()), false);
        moDateLastHire.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateLastHire.getText()), false);
        jsAnniversary.setModel(new SpinnerNumberModel(1, 1, 100, 1));
        moIntBenefitYear.setIntegerSettings(SGuiUtils.getLabelName(jlBenefitAnniversary.getText()), SGuiConsts.GUI_TYPE_INT_CAL_YEAR, true);
        moIntDaysToPaidTable.setIntegerSettings(SGuiUtils.getLabelName(jlDaysToPaidTable.getText()), SGuiConsts.GUI_TYPE_INT, false);
        moIntScheduledDays.setIntegerSettings(SGuiUtils.getLabelName(jlScheduledDays.getText()), SGuiConsts.GUI_TYPE_INT, false);
        moIntPaymentDays.setIntegerSettings(SGuiUtils.getLabelName(jlPaymentDays.getText()), SGuiConsts.GUI_TYPE_INT, false);
        moIntEffectiveDays.setIntegerSettings(SGuiUtils.getLabelName(jlEffectiveDays.getText()), SGuiConsts.GUI_TYPE_INT, true);
        moTextNotes.setTextSettings(SGuiUtils.getLabelName(jlNotes.getText()), 255, 0);

        moFields.addField(moKeyEmployee);
        moFields.addField(moDateDate);
        moFields.addField(moKeyAbsenceClass);
        moFields.addField(moKeyAbsenceType);
        moFields.addField(moTextNumber);
        moFields.addField(moDateDateStart);
        moFields.addField(moDateDateEnd);
        moFields.addField(moDateBenefitDate);
        moFields.addField(moDateLastHire);
        moFields.addField(moIntBenefitYear);
        moFields.addField(moIntDaysToPaidTable);
        moFields.addField(moIntScheduledDays);
        moFields.addField(moIntPaymentDays);
        moFields.addField(moIntEffectiveDays);
        moFields.addField(moTextNotes);

        moFields.setFormButton(jbSave);
    }
    
    private void loadBenefitTables() throws Exception {
        ArrayList<SDbBenefitTable> aBenefitTables = new ArrayList<>();
        
        if (moConfig.getFkEarningVacationsId_n() == SLibConsts.UNDEFINED) {
            throw new Exception(SLibConsts.ERR_MSG_OPTION_UNKNOWN + " (Configuración vacaciones)");
        }
        
        moBenefitTable = SHrsUtils.getBenefitTableByEarning(
                miClient.getSession(), 
                moConfig.getFkEarningVacationsId_n(), 
                moEmployee.getFkPaymentTypeId(), 
                (moDateDate.getValue() != null ? moDateDate.getValue() : SLibTimeUtils.createDate(moIntBenefitYear.getValue(), 1, 1)));
        
        aBenefitTables.add(moBenefitTable);
        
        maBenefitTableByAnniversary = SHrsUtils.getBenefitTablesAnniversarys(aBenefitTables);
    }
    
    private void setDateBenefit() {
        moDateBenefitDate.setValue(moEmployee.getDateBenefits());
        moDateLastHire.setValue(moEmployee.getDateLastHire());
    }
    
    private void setSenority() {
        if (moEmployee != null && mtDateCutOff != null) {
            int benefitAnniv = SHrsUtils.getSeniorityEmployee(moEmployee.getDateBenefits(), mtDateCutOff);

            jsAnniversary.setValue(benefitAnniv == 0 ? 1 : benefitAnniv);

            actionStateChangeAnniversary();
        }
    }
    
    private void readHrsBenefitAcummulate(int seniority, int benefitYear) {
        int scheduledDays = 0;
        int paymentDays = 0;
        int daysTable = 0;
        SHrsBenefitTableByAnniversary benefitTableRow = null;
        
        try {
            loadBenefitTables();
            
            for (SHrsBenefitTableByAnniversary row : maBenefitTableByAnniversary) {
                if (row.getBenefitAnn() <= seniority) {
                    benefitTableRow = row;
                }
            }
            daysTable = benefitTableRow == null ? 0 : (int) benefitTableRow.getValue();
            scheduledDays = SHrsUtils.getScheduledDays(miClient.getSession(), moEmployee, seniority, benefitYear, moRegistry.getPkAbsenceId());
            paymentDays = SHrsUtils.getPaymentVacationsByEmployee(miClient.getSession(), moEmployee.getPkEmployeeId(), seniority, benefitYear);
            
            moIntDaysToPaidTable.setValue(daysTable);
            moIntScheduledDays.setValue(scheduledDays);
            moIntPaymentDays.setValue(paymentDays);
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }

    private void itemStateEmployee() {
        if (moKeyEmployee.getSelectedIndex() <= 0) {
            moEmployee = null;
        }
        else {
            moEmployee = (SDbEmployee) miClient.getSession().readRegistry(SModConsts.HRSU_EMP, new int[] { moKeyEmployee.getValue()[0] });
            setDateBenefit();
        }
        itemStateAbsenceClass();
    }
    
    private void itemStateAbsenceClass() {
        if (moKeyAbsenceClass.getSelectedIndex() <= 0) {
            jsAnniversary.setEnabled(false);
            moIntBenefitYear.setValue(0);
        }
        else {
            jsAnniversary.setEnabled(moEmployee != null && moKeyAbsenceClass.getValue()[0] == SModSysConsts.HRSU_CL_ABS_VAC);
            actionStateChangeAnniversary();
        }
    }
    
    private void calculateWorkingDays(boolean calculateOnly) {
        mnWorkingDays = 0;
        mtDateCutOff = moDateDateEnd.getValue();
        
        if (moDateDateStart.getValue() != null && mtDateCutOff != null) {
            mnWorkingDays = (int) SLibTimeUtils.getDaysDiff(mtDateCutOff, moDateDateStart.getValue()) + 1;
        }

        if (!calculateOnly) {
            moIntEffectiveDays.setValue(mnWorkingDays);
        }
        
        if (moRegistry.isRegistryNew()) {
            setSenority();
        }
    }
    
    private void actionStateChangeAnniversary() {
        if (jsAnniversary.isEnabled()) {
            moIntBenefitYear.setValue(SLibTimeUtils.digestYear(SLibTimeUtils.addDate(moEmployee.getDateBenefits(), (Integer) jsAnniversary.getValue() - 1, 0, 0))[0]);
            readHrsBenefitAcummulate((Integer) jsAnniversary.getValue(), moIntBenefitYear.getValue());
        }
        else {
            moIntBenefitYear.setValue(0);
            moIntDaysToPaidTable.setValue(0);
            moIntScheduledDays.setValue(0);
        }
    }

    /*
     * Public methods
     */

    /*
     * Overriden methods
     */

    @Override
    public void addAllListeners() {
        moKeyEmployee.addItemListener(this);
        moKeyAbsenceClass.addItemListener(this);
        moDateDateEnd.getComponent().addFocusListener(this);
        jsAnniversary.addChangeListener(this);
    }

    @Override
    public void removeAllListeners() {
        moKeyEmployee.removeItemListener(this);
        moKeyAbsenceClass.removeItemListener(this);
        moDateDateEnd.getComponent().removeFocusListener(this);
        jsAnniversary.removeChangeListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyEmployee, SModConsts.HRSU_EMP, SLibConsts.UNDEFINED, null);
        moFieldKeyGroup.populateCatalogues();
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        int employeeId = SLibConsts.UNDEFINED;

        moRegistry = (SDbAbsence) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;
        
        moConfig = (SDbConfig) miClient.getSession().readRegistry(SModConsts.HRS_CFG, new int[] { SUtilConsts.BPR_CO_ID });

        removeAllListeners();
        reloadCatalogues();

        employeeId = moRegistry.getPkEmployeeId();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            moRegistry.setPkEmployeeId(employeeId);
            moRegistry.setDate(miClient.getSession().getCurrentDate());
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moKeyEmployee.setValue(new int[] { moRegistry.getPkEmployeeId() });
        moKeyAbsenceClass.setValue(new int[] { moRegistry.getFkAbsenceClassId() });
        itemStateAbsenceClass();
        moKeyAbsenceType.setValue(new int[] { moRegistry.getFkAbsenceClassId(), moRegistry.getFkAbsenceTypeId() });
        moTextNumber.setValue(moRegistry.getNumber());
        moDateDate.setValue(moRegistry.getDate());
        moDateDateStart.setValue(moRegistry.getDateStart());
        moDateDateEnd.setValue(moRegistry.getDateEnd());
        jsAnniversary.setValue((Integer) moRegistry.getBenefitsAniversary() == 0 ? (Integer) 1 : (Integer) moRegistry.getBenefitsAniversary());
        moIntBenefitYear.setValue(moRegistry.getBenefitsYear());
        moIntDaysToPaidTable.setValue(0);
        moIntScheduledDays.setValue(0);
        moIntEffectiveDays.setValue(moRegistry.getEffectiveDays());
        
        moTextNotes.setValue(moRegistry.getNotes());

        setFormEditable(true);

        if (moRegistry.isRegistryNew()) {
            moKeyEmployee.setEnabled(true);
            if (moRegistry.getFkAbsenceClassId() == SLibConsts.UNDEFINED) {
                moFieldKeyGroup.resetGroup();
            }
        }
        else {
            moKeyEmployee.setEnabled(false);
        }
        
        calculateWorkingDays(true);
        itemStateEmployee();
        
        moDateBenefitDate.setEditable(false);
        moDateLastHire.setEditable(false);
        moIntBenefitYear.setEditable(false);
        moIntDaysToPaidTable.setEditable(false);
        moIntScheduledDays.setEditable(false);
        moIntPaymentDays.setEditable(false);

        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbAbsence registry = moRegistry.clone();

        if (registry.isRegistryNew()) {
            registry.setPkEmployeeId(moKeyEmployee.getValue()[0]);
            registry.setFkUserClosedId(SUtilConsts.USR_NA_ID);
        }

        registry.setNumber(moTextNumber.getValue());
        registry.setDate(moDateDate.getValue());
        registry.setDateStart(moDateDateStart.getValue());
        registry.setDateEnd(moDateDateEnd.getValue());
        registry.setEffectiveDays(moIntEffectiveDays.getValue());
        registry.setBenefitsAniversary(!jsAnniversary.isEnabled() ? 0 : (Integer) jsAnniversary.getValue());
        registry.setBenefitsYear(moIntBenefitYear.getValue());
        registry.setNotes(moTextNotes.getValue());
        //registry.setClosed(moBoolClosed.getValue());  // not editable from this context
        registry.setFkAbsenceClassId(moKeyAbsenceType.getValue()[0]);
        registry.setFkAbsenceTypeId(moKeyAbsenceType.getValue()[1]);

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        String msg = "";
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            //validation = SGuiUtils.validateDateRange(moDateDateStart, moDateDateEnd); // XXX jbarajas allow absence from different years
            
            if (moDateDateEnd.getValue().before(moDateDateStart.getValue())) {
                validation.setMessage("La fecha inicial debe ser anterior a la fecha final.");
                validation.setComponent(moDateDateStart.getComponent());
            }

            if (validation.isValid()) {
                if (moIntEffectiveDays.getValue() > mnWorkingDays) {
                    validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlEffectiveDays) + "'" +
                            SGuiConsts.ERR_MSG_FIELD_VAL_LESS_EQUAL + mnWorkingDays + ".");
                    validation.setComponent(moIntEffectiveDays);
                }
                
                if (validation.isValid() && moKeyAbsenceClass.getValue()[0] == SModSysConsts.HRSU_CL_ABS_VAC) {
                    if ((moIntEffectiveDays.getValue() + moIntScheduledDays.getValue()) > moIntDaysToPaidTable.getValue()) {
                        msg = "La suma de '" + SGuiUtils.getLabelName(jlScheduledDays) + "' + '" + SGuiUtils.getLabelName(jlEffectiveDays) + "' es mayor a '" + SGuiUtils.getLabelName(jlDaysToPaidTable) + "'.";

                        if (miClient.showMsgBoxConfirm(msg + "\n" + SGuiConsts.MSG_CNF_CONT) == JOptionPane.NO_OPTION) {
                            validation.setMessage(msg);
                            validation.setComponent(moIntEffectiveDays);
                        }
                    }
                    
                    if (validation.isValid()) {
                        if ((moIntEffectiveDays.getValue() + moIntPaymentDays.getValue()) > moIntDaysToPaidTable.getValue()) {
                            msg = "La suma de '" + SGuiUtils.getLabelName(jlPaymentDays) + "' + '" + SGuiUtils.getLabelName(jlEffectiveDays) + "' es mayor a '" + SGuiUtils.getLabelName(jlDaysToPaidTable) + "'.";

                            if (miClient.showMsgBoxConfirm(msg + "\n" + SGuiConsts.MSG_CNF_CONT) == JOptionPane.NO_OPTION) {
                                validation.setMessage(msg);
                                validation.setComponent(moIntEffectiveDays);
                            }
                        }
                    }
                }
            }
        }

        return validation;
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof SBeanFieldKey) {
            SBeanFieldKey field = (SBeanFieldKey) e.getSource();

            if (field == moKeyAbsenceClass) {
                itemStateAbsenceClass();
            }
            else if (field == moKeyEmployee) {
                itemStateEmployee();
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {
    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof JFormattedTextField) {
            JFormattedTextField field = (JFormattedTextField) e.getSource();

            if (field == moDateDateEnd.getComponent()) {
                calculateWorkingDays(false);
            }
        }
    }

    @Override
    public void stateChanged(ChangeEvent e) {
        if (e.getSource() instanceof JSpinner) {
            JSpinner spinner = (JSpinner) e.getSource();

            if (spinner == jsAnniversary) {
                actionStateChangeAnniversary();
            }
        }
    }
}

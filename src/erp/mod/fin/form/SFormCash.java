/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.fin.form;

import erp.gui.session.SSessionCustom;
import erp.mfin.data.SDataAccountCash;
import erp.mfin.data.SDataRecord;
import erp.mfin.data.SDataRecordEntry;
import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.fin.db.SDbAbpEntity;
import erp.mod.fin.db.SFinBalance;
import erp.mod.fin.db.SFinConsts;
import erp.mod.fin.db.SFinUtils;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.UIManager;
import sa.gui.util.SUtilConsts;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbConsts;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridPaneFormOwner;
import sa.lib.grid.SGridRow;
import sa.lib.grid.SGridUtils;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Sergio Flores
 */
public class SFormCash extends SBeanForm implements SGridPaneFormOwner, ActionListener {

    private SSessionCustom moSessionCustom;
    private SDialogCashMoveBizPartner moDialogCashMoveBizPartnerMi;
    private SDialogCashMoveBizPartner moDialogCashMoveBizPartnerMo;
    private SDialogCashMove moDialogCashMoveMi;
    private SDialogCashMove moDialogCashMoveMo;
    private SGridPaneForm moGridRecordEntries;
    private SDataRecord moRecordXXX;
    private int mnBkkNumber;
    private SDataAccountCash moCashXXX;
    private SDbAbpEntity moAbpCash;
    private int[] manCashCurrencyKey;
    private boolean mbCashLocalCurrency;
    private HashSet<Integer> moCurrentChecksSet;
    private JButton mjSumRecordEntries;
    private JToggleButton mjToggleRecordEntries;

    /**
     * Creates new form SFormCash
     */
    public SFormCash(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.FIN_REC, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jlBranch = new javax.swing.JLabel();
        jtfBranchCode = new javax.swing.JTextField();
        jtfBranch = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jlCash = new javax.swing.JLabel();
        jtfCashCode = new javax.swing.JTextField();
        jtfCash = new javax.swing.JTextField();
        jPanel15 = new javax.swing.JPanel();
        jlCurrency = new javax.swing.JLabel();
        jtfCurrencyCode = new javax.swing.JTextField();
        jtfCurrency = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        jlExchangeRate = new javax.swing.JLabel();
        moDecExchangeRate = new sa.lib.gui.bean.SBeanFieldDecimal();
        jtfExchangeRate = new javax.swing.JTextField();
        jPanel26 = new javax.swing.JPanel();
        jPanel24 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        moDateDate = new sa.lib.gui.bean.SBeanFieldDate();
        jckCheckWallet = new javax.swing.JCheckBox();
        jPanel7 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jlOpeningBalance = new javax.swing.JLabel();
        moCurOpeningBalanceCy = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        moCurOpeningBalance = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jPanel11 = new javax.swing.JPanel();
        jlIncome = new javax.swing.JLabel();
        moCurIncomeCy = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        moCurIncome = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jPanel12 = new javax.swing.JPanel();
        jlExpenses = new javax.swing.JLabel();
        moCurExpensesCy = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        moCurExpenses = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jPanel13 = new javax.swing.JPanel();
        jlBalance = new javax.swing.JLabel();
        moCurBalanceCy = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        moCurBalance = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jPanel5 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jbMiBizPartnerCus = new javax.swing.JButton();
        jbMiBizPartnerCusAdv = new javax.swing.JButton();
        jbMiBizPartnerSup = new javax.swing.JButton();
        jbMiBizPartnerSupAdv = new javax.swing.JButton();
        jbMiBizPartnerDbr = new javax.swing.JButton();
        jbMiBizPartnerCdr = new javax.swing.JButton();
        jbMiTransfer = new javax.swing.JButton();
        jbMiInvestment = new javax.swing.JButton();
        jbMiOwnersEquity = new javax.swing.JButton();
        jbMiFinance = new javax.swing.JButton();
        jbMiAdjustment = new javax.swing.JButton();
        jbMiExchangeRateDiff = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jbMiOther = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jbMoBizPartnerSup = new javax.swing.JButton();
        jbMoBizPartnerSupAdv = new javax.swing.JButton();
        jbMoBizPartnerCus = new javax.swing.JButton();
        jbMoBizPartnerCusAdv = new javax.swing.JButton();
        jbMoBizPartnerDbr = new javax.swing.JButton();
        jbMoBizPartnerCdr = new javax.swing.JButton();
        jbMoTransfer = new javax.swing.JButton();
        jbMoInvestment = new javax.swing.JButton();
        jbMoOwnersEquity = new javax.swing.JButton();
        jbMoFinance = new javax.swing.JButton();
        jbMoAdjustment = new javax.swing.JButton();
        jbMoExchangeRateDiff = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jbMoOther = new javax.swing.JButton();
        jPanel25 = new javax.swing.JPanel();
        jpEntries = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jlRecNumber = new javax.swing.JLabel();
        jtfRecNumber = new javax.swing.JTextField();
        jPanel27 = new javax.swing.JPanel();
        jlRecPeriod = new javax.swing.JLabel();
        jtfRecPeriod = new javax.swing.JTextField();
        jPanel23 = new javax.swing.JPanel();
        jlRecConcept = new javax.swing.JLabel();
        moTextRecConcept = new sa.lib.gui.bean.SBeanFieldText();
        jPanel18 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jlRecDebit = new javax.swing.JLabel();
        moCurRecDebit = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jPanel20 = new javax.swing.JPanel();
        jlRecCredit = new javax.swing.JLabel();
        moCurRecCredit = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jPanel21 = new javax.swing.JPanel();
        jlRecBalance = new javax.swing.JLabel();
        moCurRecBalance = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Cuenta de dinero:"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel6.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBranch.setText("Sucursal empresa:");
        jlBranch.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlBranch);

        jtfBranchCode.setEditable(false);
        jtfBranchCode.setFocusable(false);
        jtfBranchCode.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel8.add(jtfBranchCode);

        jtfBranch.setEditable(false);
        jtfBranch.setFocusable(false);
        jtfBranch.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel8.add(jtfBranch);

        jPanel6.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCash.setText("Cuenta de dinero:");
        jlCash.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlCash);

        jtfCashCode.setEditable(false);
        jtfCashCode.setFocusable(false);
        jtfCashCode.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel9.add(jtfCashCode);

        jtfCash.setEditable(false);
        jtfCash.setFocusable(false);
        jtfCash.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel9.add(jtfCash);

        jPanel6.add(jPanel9);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCurrency.setText("Moneda:");
        jlCurrency.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlCurrency);

        jtfCurrencyCode.setEditable(false);
        jtfCurrencyCode.setFocusable(false);
        jtfCurrencyCode.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel15.add(jtfCurrencyCode);

        jtfCurrency.setEditable(false);
        jtfCurrency.setFocusable(false);
        jtfCurrency.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel15.add(jtfCurrency);

        jPanel6.add(jPanel15);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlExchangeRate.setText("Tipo de cambio:");
        jlExchangeRate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlExchangeRate);

        moDecExchangeRate.setEditable(false);
        jPanel14.add(moDecExchangeRate);

        jtfExchangeRate.setEditable(false);
        jtfExchangeRate.setFocusable(false);
        jtfExchangeRate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jtfExchangeRate);

        jPanel6.add(jPanel14);

        jPanel2.add(jPanel6, java.awt.BorderLayout.WEST);

        jPanel26.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDate.setText("Fecha:*");
        jlDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel24.add(jlDate);
        jPanel24.add(moDateDate);

        jPanel26.add(jPanel24);

        jckCheckWallet.setText("Chequera");
        jckCheckWallet.setEnabled(false);
        jPanel26.add(jckCheckWallet);

        jPanel2.add(jPanel26, java.awt.BorderLayout.CENTER);

        jPanel7.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlOpeningBalance.setText("Saldo anterior:");
        jlOpeningBalance.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlOpeningBalance);

        moCurOpeningBalanceCy.setEditable(false);
        moCurOpeningBalanceCy.setFocusable(false);
        jPanel10.add(moCurOpeningBalanceCy);

        moCurOpeningBalance.setEditable(false);
        moCurOpeningBalance.setFocusable(false);
        jPanel10.add(moCurOpeningBalance);

        jPanel7.add(jPanel10);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlIncome.setText("Ingresos:");
        jlIncome.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlIncome);

        moCurIncomeCy.setEditable(false);
        moCurIncomeCy.setFocusable(false);
        jPanel11.add(moCurIncomeCy);

        moCurIncome.setEditable(false);
        moCurIncome.setFocusable(false);
        jPanel11.add(moCurIncome);

        jPanel7.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlExpenses.setText("Egresos:");
        jlExpenses.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlExpenses);

        moCurExpensesCy.setEditable(false);
        moCurExpensesCy.setFocusable(false);
        jPanel12.add(moCurExpensesCy);

        moCurExpenses.setEditable(false);
        moCurExpenses.setFocusable(false);
        jPanel12.add(moCurExpenses);

        jPanel7.add(jPanel12);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBalance.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlBalance.setText("Saldo disponible:");
        jlBalance.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlBalance);

        moCurBalanceCy.setEditable(false);
        moCurBalanceCy.setFocusable(false);
        jPanel13.add(moCurBalanceCy);

        moCurBalance.setEditable(false);
        moCurBalance.setFocusable(false);
        jPanel13.add(moCurBalance);

        jPanel7.add(jPanel13);

        jPanel2.add(jPanel7, java.awt.BorderLayout.EAST);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Movimientos de la cuenta de dinero:"));
        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridLayout(1, 2));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Ingresos:"));
        jPanel3.setLayout(new java.awt.GridLayout(14, 1, 0, 5));

        jbMiBizPartnerCus.setForeground(new java.awt.Color(0, 0, 255));
        jbMiBizPartnerCus.setText("Pago cliente");
        jbMiBizPartnerCus.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbMiBizPartnerCus.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jbMiBizPartnerCus);

        jbMiBizPartnerCusAdv.setForeground(new java.awt.Color(0, 0, 255));
        jbMiBizPartnerCusAdv.setText("Antic. cliente");
        jbMiBizPartnerCusAdv.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbMiBizPartnerCusAdv.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jbMiBizPartnerCusAdv);

        jbMiBizPartnerSup.setForeground(new java.awt.Color(0, 0, 255));
        jbMiBizPartnerSup.setText("Dev. pago prov.");
        jbMiBizPartnerSup.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbMiBizPartnerSup.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jbMiBizPartnerSup);

        jbMiBizPartnerSupAdv.setForeground(new java.awt.Color(0, 0, 255));
        jbMiBizPartnerSupAdv.setText("Dev. antic. prov.");
        jbMiBizPartnerSupAdv.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbMiBizPartnerSupAdv.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jbMiBizPartnerSupAdv);

        jbMiBizPartnerDbr.setForeground(new java.awt.Color(0, 0, 255));
        jbMiBizPartnerDbr.setText("Ing. deudor div.");
        jbMiBizPartnerDbr.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbMiBizPartnerDbr.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jbMiBizPartnerDbr);

        jbMiBizPartnerCdr.setForeground(new java.awt.Color(0, 0, 255));
        jbMiBizPartnerCdr.setText("Ing. acreed. div.");
        jbMiBizPartnerCdr.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbMiBizPartnerCdr.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jbMiBizPartnerCdr);

        jbMiTransfer.setText("Ing. traspaso");
        jbMiTransfer.setEnabled(false);
        jbMiTransfer.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbMiTransfer.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jbMiTransfer);

        jbMiInvestment.setForeground(new java.awt.Color(255, 0, 255));
        jbMiInvestment.setText("Ing. inversión");
        jbMiInvestment.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbMiInvestment.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jbMiInvestment);

        jbMiOwnersEquity.setForeground(new java.awt.Color(255, 0, 255));
        jbMiOwnersEquity.setText("Ing. capital c.");
        jbMiOwnersEquity.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbMiOwnersEquity.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jbMiOwnersEquity);

        jbMiFinance.setForeground(new java.awt.Color(255, 0, 0));
        jbMiFinance.setText("Ing. prod. fin.");
        jbMiFinance.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbMiFinance.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jbMiFinance);

        jbMiAdjustment.setForeground(new java.awt.Color(255, 0, 0));
        jbMiAdjustment.setText("Ing. otro prod.");
        jbMiAdjustment.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbMiAdjustment.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jbMiAdjustment);

        jbMiExchangeRateDiff.setForeground(new java.awt.Color(255, 0, 0));
        jbMiExchangeRateDiff.setText("Ing. dif. camb.");
        jbMiExchangeRateDiff.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbMiExchangeRateDiff.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jbMiExchangeRateDiff);

        jLabel1.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jLabel1);

        jbMiOther.setText("Otro mov. ingreso");
        jbMiOther.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbMiOther.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jbMiOther);

        jPanel1.add(jPanel3);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Egresos:"));
        jPanel4.setLayout(new java.awt.GridLayout(14, 1, 0, 5));

        jbMoBizPartnerSup.setForeground(new java.awt.Color(0, 0, 255));
        jbMoBizPartnerSup.setText("Pago proveedor");
        jbMoBizPartnerSup.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbMoBizPartnerSup.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jbMoBizPartnerSup);

        jbMoBizPartnerSupAdv.setForeground(new java.awt.Color(0, 0, 255));
        jbMoBizPartnerSupAdv.setText("Antic. proveedor");
        jbMoBizPartnerSupAdv.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbMoBizPartnerSupAdv.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jbMoBizPartnerSupAdv);

        jbMoBizPartnerCus.setForeground(new java.awt.Color(0, 0, 255));
        jbMoBizPartnerCus.setText("Dev. pago cte.");
        jbMoBizPartnerCus.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbMoBizPartnerCus.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jbMoBizPartnerCus);

        jbMoBizPartnerCusAdv.setForeground(new java.awt.Color(0, 0, 255));
        jbMoBizPartnerCusAdv.setText("Dev. antic. cte.");
        jbMoBizPartnerCusAdv.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbMoBizPartnerCusAdv.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jbMoBizPartnerCusAdv);

        jbMoBizPartnerDbr.setForeground(new java.awt.Color(0, 0, 255));
        jbMoBizPartnerDbr.setText("Egr. deudor div.");
        jbMoBizPartnerDbr.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbMoBizPartnerDbr.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jbMoBizPartnerDbr);

        jbMoBizPartnerCdr.setForeground(new java.awt.Color(0, 0, 255));
        jbMoBizPartnerCdr.setText("Egr. acreed. div.");
        jbMoBizPartnerCdr.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbMoBizPartnerCdr.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jbMoBizPartnerCdr);

        jbMoTransfer.setForeground(new java.awt.Color(255, 0, 255));
        jbMoTransfer.setText("Egr. traspaso");
        jbMoTransfer.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbMoTransfer.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jbMoTransfer);

        jbMoInvestment.setForeground(new java.awt.Color(255, 0, 255));
        jbMoInvestment.setText("Egr. inversión");
        jbMoInvestment.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbMoInvestment.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jbMoInvestment);

        jbMoOwnersEquity.setForeground(new java.awt.Color(255, 0, 255));
        jbMoOwnersEquity.setText("Egr. capital c.");
        jbMoOwnersEquity.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbMoOwnersEquity.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jbMoOwnersEquity);

        jbMoFinance.setForeground(new java.awt.Color(255, 0, 0));
        jbMoFinance.setText("Egr. gasto fin.");
        jbMoFinance.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbMoFinance.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jbMoFinance);

        jbMoAdjustment.setForeground(new java.awt.Color(255, 0, 0));
        jbMoAdjustment.setText("Egr. otro gasto");
        jbMoAdjustment.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbMoAdjustment.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jbMoAdjustment);

        jbMoExchangeRateDiff.setForeground(java.awt.Color.red);
        jbMoExchangeRateDiff.setText("Egr. dif. camb.");
        jbMoExchangeRateDiff.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbMoExchangeRateDiff.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jbMoExchangeRateDiff);

        jLabel2.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jLabel2);

        jbMoOther.setText("Otro mov. egreso");
        jbMoOther.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbMoOther.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jbMoOther);

        jPanel1.add(jPanel4);

        jPanel5.add(jPanel1, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel5, java.awt.BorderLayout.WEST);

        jPanel25.setLayout(new java.awt.BorderLayout());

        jpEntries.setBorder(javax.swing.BorderFactory.createTitledBorder("Partidas de la póliza contable:"));
        jpEntries.setLayout(new java.awt.BorderLayout());
        jPanel25.add(jpEntries, java.awt.BorderLayout.CENTER);

        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder("Póliza contable:"));
        jPanel16.setLayout(new java.awt.BorderLayout());

        jPanel17.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlRecNumber.setText("Póliza contable:");
        jlRecNumber.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel22.add(jlRecNumber);

        jtfRecNumber.setEditable(false);
        jtfRecNumber.setFocusable(false);
        jtfRecNumber.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel22.add(jtfRecNumber);

        jPanel17.add(jPanel22);

        jPanel27.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlRecPeriod.setText("Período contable:");
        jlRecPeriod.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel27.add(jlRecPeriod);

        jtfRecPeriod.setEditable(false);
        jtfRecPeriod.setFocusable(false);
        jtfRecPeriod.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel27.add(jtfRecPeriod);

        jPanel17.add(jPanel27);

        jPanel23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlRecConcept.setText("Concepto póliza:*");
        jlRecConcept.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel23.add(jlRecConcept);

        moTextRecConcept.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel23.add(moTextRecConcept);

        jPanel17.add(jPanel23);

        jPanel16.add(jPanel17, java.awt.BorderLayout.CENTER);

        jPanel18.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlRecDebit.setText("Cargos póliza:");
        jlRecDebit.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel19.add(jlRecDebit);

        moCurRecDebit.setEditable(false);
        moCurRecDebit.setFocusable(false);
        jPanel19.add(moCurRecDebit);

        jPanel18.add(jPanel19);

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlRecCredit.setText("Abonos póliza:");
        jlRecCredit.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel20.add(jlRecCredit);

        moCurRecCredit.setEditable(false);
        moCurRecCredit.setFocusable(false);
        jPanel20.add(moCurRecCredit);

        jPanel18.add(jPanel20);

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlRecBalance.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlRecBalance.setText("Saldo póliza:");
        jlRecBalance.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel21.add(jlRecBalance);

        moCurRecBalance.setEditable(false);
        moCurRecBalance.setFocusable(false);
        jPanel21.add(moCurRecBalance);

        jPanel18.add(jPanel21);

        jPanel16.add(jPanel18, java.awt.BorderLayout.EAST);

        jPanel25.add(jPanel16, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel25, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbMiAdjustment;
    private javax.swing.JButton jbMiBizPartnerCdr;
    private javax.swing.JButton jbMiBizPartnerCus;
    private javax.swing.JButton jbMiBizPartnerCusAdv;
    private javax.swing.JButton jbMiBizPartnerDbr;
    private javax.swing.JButton jbMiBizPartnerSup;
    private javax.swing.JButton jbMiBizPartnerSupAdv;
    private javax.swing.JButton jbMiExchangeRateDiff;
    private javax.swing.JButton jbMiFinance;
    private javax.swing.JButton jbMiInvestment;
    private javax.swing.JButton jbMiOther;
    private javax.swing.JButton jbMiOwnersEquity;
    private javax.swing.JButton jbMiTransfer;
    private javax.swing.JButton jbMoAdjustment;
    private javax.swing.JButton jbMoBizPartnerCdr;
    private javax.swing.JButton jbMoBizPartnerCus;
    private javax.swing.JButton jbMoBizPartnerCusAdv;
    private javax.swing.JButton jbMoBizPartnerDbr;
    private javax.swing.JButton jbMoBizPartnerSup;
    private javax.swing.JButton jbMoBizPartnerSupAdv;
    private javax.swing.JButton jbMoExchangeRateDiff;
    private javax.swing.JButton jbMoFinance;
    private javax.swing.JButton jbMoInvestment;
    private javax.swing.JButton jbMoOther;
    private javax.swing.JButton jbMoOwnersEquity;
    private javax.swing.JButton jbMoTransfer;
    private javax.swing.JCheckBox jckCheckWallet;
    private javax.swing.JLabel jlBalance;
    private javax.swing.JLabel jlBranch;
    private javax.swing.JLabel jlCash;
    private javax.swing.JLabel jlCurrency;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlExchangeRate;
    private javax.swing.JLabel jlExpenses;
    private javax.swing.JLabel jlIncome;
    private javax.swing.JLabel jlOpeningBalance;
    private javax.swing.JLabel jlRecBalance;
    private javax.swing.JLabel jlRecConcept;
    private javax.swing.JLabel jlRecCredit;
    private javax.swing.JLabel jlRecDebit;
    private javax.swing.JLabel jlRecNumber;
    private javax.swing.JLabel jlRecPeriod;
    private javax.swing.JPanel jpEntries;
    private javax.swing.JTextField jtfBranch;
    private javax.swing.JTextField jtfBranchCode;
    private javax.swing.JTextField jtfCash;
    private javax.swing.JTextField jtfCashCode;
    private javax.swing.JTextField jtfCurrency;
    private javax.swing.JTextField jtfCurrencyCode;
    private javax.swing.JTextField jtfExchangeRate;
    private javax.swing.JTextField jtfRecNumber;
    private javax.swing.JTextField jtfRecPeriod;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurBalance;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurBalanceCy;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurExpenses;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurExpensesCy;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurIncome;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurIncomeCy;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurOpeningBalance;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurOpeningBalanceCy;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurRecBalance;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurRecCredit;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurRecDebit;
    private sa.lib.gui.bean.SBeanFieldDate moDateDate;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecExchangeRate;
    private sa.lib.gui.bean.SBeanFieldText moTextRecConcept;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 1000, 625);

        moDecExchangeRate.setDecimalSettings(SGuiUtils.getLabelName(jlExchangeRate), SGuiConsts.GUI_TYPE_DEC_EXC_RATE, true);
        moDecExchangeRate.setDecimalFormat(SLibUtils.DecimalFormatValue8D);
        moDecExchangeRate.setTab(WIDTH);
        moDateDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDate), true);
        moCurOpeningBalanceCy.setCompoundFieldSettings(miClient);
        moCurOpeningBalanceCy.getField().setDecimalSettings(SGuiUtils.getLabelName(jlOpeningBalance), SGuiConsts.GUI_TYPE_DEC_AMT, true);
        moCurOpeningBalance.setCompoundFieldSettings(miClient);
        moCurOpeningBalance.getField().setDecimalSettings(SGuiUtils.getLabelName(jlOpeningBalance), SGuiConsts.GUI_TYPE_DEC_AMT, true);
        moCurIncomeCy.setCompoundFieldSettings(miClient);
        moCurIncomeCy.getField().setDecimalSettings(SGuiUtils.getLabelName(jlIncome), SGuiConsts.GUI_TYPE_DEC_AMT, true);
        moCurIncome.setCompoundFieldSettings(miClient);
        moCurIncome.getField().setDecimalSettings(SGuiUtils.getLabelName(jlIncome), SGuiConsts.GUI_TYPE_DEC_AMT, true);
        moCurExpensesCy.setCompoundFieldSettings(miClient);
        moCurExpensesCy.getField().setDecimalSettings(SGuiUtils.getLabelName(jlExpenses), SGuiConsts.GUI_TYPE_DEC_AMT, true);
        moCurExpenses.setCompoundFieldSettings(miClient);
        moCurExpenses.getField().setDecimalSettings(SGuiUtils.getLabelName(jlExpenses), SGuiConsts.GUI_TYPE_DEC_AMT, true);
        moCurBalanceCy.setCompoundFieldSettings(miClient);
        moCurBalanceCy.getField().setDecimalSettings(SGuiUtils.getLabelName(jlBalance), SGuiConsts.GUI_TYPE_DEC_AMT, true);
        moCurBalance.setCompoundFieldSettings(miClient);
        moCurBalance.getField().setDecimalSettings(SGuiUtils.getLabelName(jlBalance), SGuiConsts.GUI_TYPE_DEC_AMT, true);
        moTextRecConcept.setTextSettings(SGuiUtils.getLabelName(jlRecConcept), 100);
        moCurRecDebit.setCompoundFieldSettings(miClient);
        moCurRecDebit.getField().setDecimalSettings(SGuiUtils.getLabelName(jlRecDebit), SGuiConsts.GUI_TYPE_DEC_AMT, true);
        moCurRecCredit.setCompoundFieldSettings(miClient);
        moCurRecCredit.getField().setDecimalSettings(SGuiUtils.getLabelName(jlRecCredit), SGuiConsts.GUI_TYPE_DEC_AMT, true);
        moCurRecBalance.setCompoundFieldSettings(miClient);
        moCurRecBalance.getField().setDecimalSettings(SGuiUtils.getLabelName(jlRecBalance), SGuiConsts.GUI_TYPE_DEC_AMT, true);

        moFields.addField(moDateDate);
        moFields.addField(moTextRecConcept);

        moFields.setFormButton(jbSave);

        moCurBalanceCy.setFont(((JTextField) moCurBalanceCy.getField()).getFont().deriveFont(Font.BOLD));
        moCurBalance.setFont(((JTextField) moCurBalance.getField()).getFont().deriveFont(Font.BOLD));
        moCurRecBalance.setFont(((JTextField) moCurRecBalance.getField()).getFont().deriveFont(Font.BOLD));

        moSessionCustom = (SSessionCustom) miClient.getSession().getSessionCustom();
        moDialogCashMoveBizPartnerMi = new SDialogCashMoveBizPartner(miClient, "Ingreso");
        moDialogCashMoveBizPartnerMo = new SDialogCashMoveBizPartner(miClient, "Egreso");
        moDialogCashMoveMi = new SDialogCashMove(miClient, "Ingreso");
        moDialogCashMoveMo = new SDialogCashMove(miClient, "Egreso");

        moCurrentChecksSet = new HashSet<Integer>();

        moGridRecordEntries = new SGridPaneForm(miClient, mnFormType, mnFormSubtype, msTitle) {

            @Override
            public void initGrid() {

            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> columns = new ArrayList<SGridColumnForm>();

                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_1B, "#"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Tipo movimiento"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Concepto"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Debe $ Mon", 90));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Haber $ Mon", 90));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CUR, "Moneda"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_EXC_RATE, "TC", 70));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Debe $", 90));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Haber $", 90));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_ACC, "Núm cta contable"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ACC, "Cta contable"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_ACC, "Núm CC"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ACC, "CC"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Clave ítem"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Ítem"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Código entidad"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Entidad"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Asociado negocios"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_REG_NUM, "Referencia"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_RAW, "Cheque"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "Dif. cambiaria"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "Sistema"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_2B, "Folio contable"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_USR, SGridConsts.COL_TITLE_USER_INS_NAME));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE_DATETIME, SGridConsts.COL_TITLE_USER_INS_TS));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_USR, SGridConsts.COL_TITLE_USER_UPD_NAME));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE_DATETIME, SGridConsts.COL_TITLE_USER_UPD_TS));

                return columns;
            }

            @Override
            public void actionRowNew() {
                if (jbRowNew.isEnabled()) {
                    actionGridRecordEntriesNew();
                }
            }

            @Override
            public void actionRowEdit() {
                if (jbRowEdit.isEnabled()) {
                    actionGridRecordEntriesEdit();
                }
            }

            @Override
            public void actionRowDelete() {
                if (jbRowDelete.isEnabled()) {
                    actionGridRecordEntriesDelete();
                }
            }
        };

        mjSumRecordEntries = SGridUtils.createButton(new ImageIcon(getClass().getResource("/erp/gui/img/icon_sum.gif")), "Sumar", this);

        mjToggleRecordEntries = new JToggleButton();
        mjToggleRecordEntries.setIcon(new ImageIcon(getClass().getResource("/erp/gui/img/icon_bkk_tot.gif")));
        mjToggleRecordEntries.setSelectedIcon(new ImageIcon(getClass().getResource("/erp/gui/img/icon_bkk_par.gif")));
        mjToggleRecordEntries.setToolTipText("Ver todo / sólo cuenta de dinero");
        mjToggleRecordEntries.setPreferredSize(new Dimension(23, 23));

        moGridRecordEntries.setForm(null);
        moGridRecordEntries.setPaneFormOwner(this);
        moGridRecordEntries.getPanelCommandsSys(SGuiConsts.PANEL_CENTER).add(mjSumRecordEntries);
        moGridRecordEntries.getPanelCommandsSys(SGuiConsts.PANEL_CENTER).add(mjToggleRecordEntries);
        jpEntries.add(moGridRecordEntries, BorderLayout.CENTER);

        mvFormGrids.add(moGridRecordEntries);
    }

    private void renderRecordEntries() {
        int sortingPosition = 0;
        Vector<SGridRow> entries = new Vector<SGridRow>();

        for (SDataRecordEntry entry : moRecordXXX.getDbmsRecordEntries()) {
            if (!entry.getIsDeleted()) {
                entry.setSortingPosition(++sortingPosition);

                if (!mjToggleRecordEntries.isSelected() || entry.getFkSystemAccountClassId() == SModSysConsts.FINS_CL_SYS_ACC_ENT_CSH && SLibUtils.compareKeys(moCashXXX.getPrimaryKey(), new int[] { entry.getFkCompanyBranchId_n(), entry.getFkEntityId_n() })) {
                    entries.add(entry);
                }
            }
        }

        moGridRecordEntries.populateGrid(entries);
    }

    private void renderRecord() {
        mnBkkNumber = 0;

        moDateDate.setValue(moRecordXXX.getDate());
        jtfRecNumber.setText(moRecordXXX.getRecordNumber());
        jtfRecNumber.setCaretPosition(0);
        jtfRecPeriod.setText(moRecordXXX.getRecordPeriod());
        jtfRecPeriod.setCaretPosition(0);
        moTextRecConcept.setValue(moRecordXXX.getConcept());

        mjToggleRecordEntries.setSelected(false);
        renderRecordEntries();
    }

    private void renderCash() {
        Color color = null;
        SFinBalance balance = null;

        jtfBranchCode.setText((String) miClient.getSession().readField(SModConsts.BPSU_BPB, new int[] { moCashXXX.getPkCompanyBranchId() }, SDbRegistry.FIELD_CODE));
        jtfBranch.setText((String) miClient.getSession().readField(SModConsts.BPSU_BPB, new int[] { moCashXXX.getPkCompanyBranchId() }, SDbRegistry.FIELD_NAME));
        jtfCashCode.setText(moCashXXX.getDbmsCompanyBranchEntity().getCode());
        jtfCash.setText(moCashXXX.getDbmsCompanyBranchEntity().getEntity());
        jtfCurrencyCode.setText(moSessionCustom.getCurrencyCode(manCashCurrencyKey));
        jtfCurrency.setText(moSessionCustom.getCurrency(manCashCurrencyKey));
        jckCheckWallet.setSelected(moCashXXX.getIsCheckWalletApplying());

        moCurOpeningBalanceCy.setCurrencyKey(manCashCurrencyKey);
        moCurIncomeCy.setCurrencyKey(manCashCurrencyKey);
        moCurExpensesCy.setCurrencyKey(manCashCurrencyKey);
        moCurBalanceCy.setCurrencyKey(manCashCurrencyKey);

        if (mbCashLocalCurrency) {
            jlExchangeRate.setEnabled(false);
            moDecExchangeRate.setEnabled(false);
            jtfExchangeRate.setEnabled(false);
            jtfExchangeRate.setText("");
            jbMiExchangeRateDiff.setEnabled(false);
            jbMoExchangeRateDiff.setEnabled(false);
            moCurOpeningBalance.setEnabled(false);
            moCurIncome.setEnabled(false);
            moCurExpenses.setEnabled(false);
            moCurBalance.setEnabled(false);
            color = UIManager.getDefaults().getColor("Button.disabledForeground");
        }
        else {
            jlExchangeRate.setEnabled(true);
            moDecExchangeRate.setEnabled(true);
            jtfExchangeRate.setEnabled(true);
            jtfExchangeRate.setText(moSessionCustom.getCurrencyCode(manCashCurrencyKey) + " / " + moSessionCustom.getLocalCurrencyCode());
            jbMiExchangeRateDiff.setEnabled(true);
            jbMoExchangeRateDiff.setEnabled(true);
            moCurOpeningBalance.setEnabled(true);
            moCurIncome.setEnabled(true);
            moCurExpenses.setEnabled(true);
            moCurBalance.setEnabled(true);
            color = Color.RED;
        }

        jbMiExchangeRateDiff.setForeground(color);
        jbMoExchangeRateDiff.setForeground(color);

        jtfBranchCode.setCaretPosition(0);
        jtfBranch.setCaretPosition(0);
        jtfCashCode.setCaretPosition(0);
        jtfCash.setCaretPosition(0);
        jtfCurrencyCode.setCaretPosition(0);
        jtfCurrency.setCaretPosition(0);
        jtfExchangeRate.setCaretPosition(0);

        // Cash opening balance:

        balance = SFinUtils.getCashBalance(miClient.getSession(), (int[]) moCashXXX.getPrimaryKey(), moDateDate.getValue(), moRecordXXX.getPrimaryKey());
        moCurOpeningBalanceCy.getField().setValue(balance.getBalanceCy());
        if (mbCashLocalCurrency) {
            ((JTextField) moCurOpeningBalance.getField()).setText("");
        }
        else {
            moCurOpeningBalance.getField().setValue(balance.getBalance());
        }
    }

    private void computeBalanceRecord() {
        int count = 0;
        double dbt = 0;
        double cdt = 0;
        SDataRecordEntry entry = null;

        for (SGridRow row : moGridRecordEntries.getModel().getGridRows()) {
            entry = (SDataRecordEntry) row;
            if (!entry.getIsDeleted()) {
                count++;
                dbt += entry.getDebit();
                cdt += entry.getCredit();
            }
        }

        moDateDate.setEditable(count == 0);
        moCurRecDebit.getField().setValue(dbt);
        moCurRecCredit.getField().setValue(cdt);
        moCurRecBalance.getField().setValue(SLibUtils.round(dbt - cdt, SLibUtils.getDecimalFormatAmount().getMaximumFractionDigits()));
    }

    private void computeBalanceCash() {
        double incCy = 0;
        double expCy = 0;
        double balCy = 0;
        double inc = 0;
        double exp = 0;
        double bal = 0;
        SDataRecordEntry entry = null;

        moCurrentChecksSet.clear();

        for (SGridRow row : moGridRecordEntries.getModel().getGridRows()) {
            entry = (SDataRecordEntry) row;
            if (!entry.getIsDeleted() &&
                    entry.getFkSystemAccountClassId() == SModSysConsts.FINS_CL_SYS_ACC_ENT_CSH &&
                    SLibUtils.compareKeys(moCashXXX.getPrimaryKey(), entry.getKeyCompanyBranchEntity())) {
                inc += entry.getDebit();
                exp += entry.getCredit();

                if (moCashXXX.getFkCurrencyId() == entry.getFkCurrencyId()) {
                    incCy += entry.getDebitCy();
                    expCy += entry.getCreditCy();
                }

                if (entry.getDbmsCheck() != null) {
                    moCurrentChecksSet.add(entry.getDbmsCheck().getNumber());
                }
            }
        }

        balCy = SLibUtils.round(moCurOpeningBalanceCy.getField().getValue() + incCy - expCy, SLibUtils.getDecimalFormatAmount().getMaximumFractionDigits());
        bal = SLibUtils.round(moCurOpeningBalance.getField().getValue() + inc - exp, SLibUtils.getDecimalFormatAmount().getMaximumFractionDigits());

        moCurIncomeCy.getField().setValue(incCy);
        moCurExpensesCy.getField().setValue(expCy);
        moCurBalanceCy.getField().setValue(balCy);

        if (mbCashLocalCurrency) {
            moDecExchangeRate.setValue(1d);
            ((JTextField) moCurIncome.getField()).setText("");
            ((JTextField) moCurExpenses.getField()).setText("");
            ((JTextField) moCurBalance.getField()).setText("");
        }
        else {
            moDecExchangeRate.setValue(SLibUtils.round(balCy == 0 ? 0d : bal / balCy, SLibUtils.DecimalFormatValue8D.getMaximumFractionDigits()));
            moCurIncome.getField().setValue(inc);
            moCurExpenses.getField().setValue(exp);
            moCurBalance.getField().setValue(bal);
        }
    }

    private boolean isUserRecordEntrySelected(final int[] keyBkkNumber, final SGridRow[] selectedGridRows) {
        boolean isSelected = false;
        SDataRecordEntry entry = null;

        if (!(keyBkkNumber[0] == SLibConsts.UNDEFINED && keyBkkNumber[1] == SLibConsts.UNDEFINED)) {
            for (SGridRow gridRow : selectedGridRows) {
                entry = (SDataRecordEntry) gridRow;
                if (SLibUtils.compareKeys(entry.getKeyBookkeepingNumber(), keyBkkNumber) && !entry.getIsSystem()) {
                    isSelected = true;
                    break;
                }
            }
        }

        return isSelected;
    }

    /**
     * Shows dialog for cash move.
     * @param keySysMoveType System move type key. Constants defined in <code>SModSysConsts</code> (FINS_TP_SYS_MOV_...).
     * @param mode Dialog mode. Constants defined in <code>SDialogCashMove</code> (MOVE_MODE_...).
     * @param entriesToEdit_n Accounting record entries. When move is new, <code>null</code> must be provided.
     * @param exchangeRate Move exchange rate. When move is not new, exchange rate is discarted.
     */
    private void actionMove(final int[] keySysMoveType, final int mode, final double exchangeRate, final SDataRecordEntry[] entriesToEdit_n) {
        int indexToSelect = 0;
        int indexToInsert = 0;
        boolean isNewMove = entriesToEdit_n == null;
        boolean isMove = false;
        SBeanFormDialog dialog = null;
        SDialogCash dialogCash = null;
        SDataRecordEntry[] entriesForDialog = null;
        ArrayList<SDataRecordEntry> entriesFromDialog = null;
        int[] keyCurrentBkkNumber = null;
        HashSet<Integer> currentChecks = new HashSet<Integer>();

        try {
            if (isNewMove && keySysMoveType[0] == SModSysConsts.FINS_CL_SYS_MOV_MO && exchangeRate == 0 && !SLibUtils.compareKeys(keySysMoveType, SModSysConsts.FINS_TP_SYS_MOV_MO_EXR)) {
                miClient.showMsgBoxWarning("No se pueden capturar egresos si el tipo de cambio de la " + SUtilConsts.TXT_BRANCH_CSH.toLowerCase() + " es " + SLibUtils.getDecimalFormatExchangeRate().format(0) + ".");
            }
            else {
                if (SFinUtils.isSysMoveTypeForBizPartnerPayment(keySysMoveType) || SFinUtils.isSysMoveTypeForBizPartnerPaymentAdvance(keySysMoveType) || SFinUtils.isSysMoveTypeForBizPartnerBalance(keySysMoveType)) {
                    isMove = false;
                    switch (keySysMoveType[0]) {
                        case SModSysConsts.FINS_CL_SYS_MOV_MI:
                            dialogCash = moDialogCashMoveBizPartnerMi;
                            break;
                        case SModSysConsts.FINS_CL_SYS_MOV_MO:
                            dialogCash = moDialogCashMoveBizPartnerMo;
                            break;
                        default:
                            miClient.showMsgBoxWarning(SLibConsts.ERR_MSG_OPTION_UNKNOWN);
                    }
                }
                else {
                    isMove = true;
                    switch (keySysMoveType[0]) {
                        case SModSysConsts.FINS_CL_SYS_MOV_MI:
                            dialogCash = moDialogCashMoveMi;
                            break;
                        case SModSysConsts.FINS_CL_SYS_MOV_MO:
                            dialogCash = moDialogCashMoveMo;
                            break;
                        default:
                            miClient.showMsgBoxWarning(SLibConsts.ERR_MSG_OPTION_UNKNOWN);
                    }
                }

                if (dialogCash != null) {
                    currentChecks.addAll(moCurrentChecksSet);

                    if (isNewMove) {
                        if (isMove && !SFinUtils.isSysMoveTypeForTransfer(keySysMoveType)) {
                            entriesForDialog = new SDataRecordEntry[1];
                            entriesForDialog[0] = new SDataRecordEntry();
                        }
                        else {
                            entriesForDialog = new SDataRecordEntry[2];
                            entriesForDialog[0] = new SDataRecordEntry();
                            entriesForDialog[1] = new SDataRecordEntry();
                        }

                        entriesForDialog[0].setExchangeRate(exchangeRate);
                    }
                    else {
                        entriesForDialog = entriesToEdit_n;
                        keyCurrentBkkNumber = entriesToEdit_n[0].getKeyBookkeepingNumber();

                        if (entriesToEdit_n[0].getDbmsCheck() != null) {
                            currentChecks.remove(entriesToEdit_n[0].getDbmsCheck().getNumber());
                        }
                    }

                    dialogCash.setMoveSettings(keySysMoveType, mode, moDateDate.getValue(), currentChecks);
                    dialogCash.setMoveData((Object[]) moRecordXXX.getPrimaryKey(), entriesForDialog);

                    dialog = (SBeanFormDialog) dialogCash;
                    dialog.setVisible(true);

                    if (dialog.getFormResult() == SGuiConsts.FORM_RESULT_OK) {
                        entriesFromDialog = dialogCash.getMoveData();

                        if (isNewMove) {
                            if (entriesFromDialog.size() > 1) {
                                mnBkkNumber++;

                                for (SDataRecordEntry entry : entriesFromDialog) {
                                    entry.setFkBookkeepingYearId_n(0);
                                    entry.setFkBookkeepingNumberId_n(mnBkkNumber);
                                }
                            }

                            moRecordXXX.getDbmsRecordEntries().addAll(entriesFromDialog);
                        }
                        else {
                            indexToSelect = moGridRecordEntries.getTable().getSelectedRow();
                            indexToInsert = moRecordXXX.getDbmsRecordEntries().indexOf(entriesToEdit_n[0]);
                            moRecordXXX.getDbmsRecordEntries().removeAll(Arrays.asList(entriesToEdit_n));

                            for (SDataRecordEntry entry : entriesFromDialog) {
                                entry.setFkBookkeepingYearId_n(keyCurrentBkkNumber[0]);
                                entry.setFkBookkeepingNumberId_n(keyCurrentBkkNumber[1]);
                                moRecordXXX.getDbmsRecordEntries().add(indexToInsert++, entry);
                            }
                        }

                        renderRecordEntries();

                        if (isNewMove) {
                            moGridRecordEntries.setSelectedGridRow(moGridRecordEntries.getTable().getRowCount() - 1);
                        }
                        else {
                            moGridRecordEntries.setSelectedGridRow(indexToSelect);
                        }

                        computeBalanceRecord();
                        computeBalanceCash();
                    }
                }
            }
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }

    private void actionSumRecordEntries() {
        double dbt = 0;
        double cdt = 0;
        String msg = "";
        SGridRow[] rows = moGridRecordEntries.getSelectedGridRows();
        HashMap<Integer, double[]> totals = null;
        SDataRecordEntry entry = null;
        int[] key = null;
        double[] total = null;

        if (moGridRecordEntries.getTable().getSelectedRowCount() == 0) {
            miClient.showMsgBoxInformation(SGridConsts.MSG_SELECT_ROWS);
        }
        else {
            rows = moGridRecordEntries.getSelectedGridRows();
            totals = new HashMap<Integer, double[]>();   // index 0 = debits; index 1 = credits

            for (SGridRow row : rows) {
                entry = (SDataRecordEntry) row;
                dbt += entry.getDebit();
                cdt += entry.getCredit();

                if (!moSessionCustom.isLocalCurrency(new int[] { entry.getFkCurrencyId() })) {
                    total = totals.get(entry.getFkCurrencyId());

                    if (total == null) {
                        total = new double[2];
                        totals.put(entry.getFkCurrencyId(), total);
                    }

                    total[0] += entry.getDebitCy();
                    total[1] += entry.getCreditCy();
                }
            }

            msg += "Suma " + moSessionCustom.getLocalCurrency() + ":";
            msg += "\ncargos = " + SLibUtils.getDecimalFormatAmount().format(dbt);
            msg += "\nabonos = " + SLibUtils.getDecimalFormatAmount().format(cdt);
            msg += "\nsaldo = " + SLibUtils.getDecimalFormatAmount().format(dbt - cdt) + " " + moSessionCustom.getLocalCurrencyCode();

            for (Integer currency : totals.keySet()) {
                key = new int[] { currency };
                total = totals.get(currency);
                msg += "\n\nSuma " + moSessionCustom.getCurrency(key) + ":";
                msg += "\ncargos = " + SLibUtils.getDecimalFormatAmount().format(total[0]);
                msg += "\nabonos = " + SLibUtils.getDecimalFormatAmount().format(total[1]);
                msg += "\nsaldo = " + SLibUtils.getDecimalFormatAmount().format(total[0] - total[1]) + " " + moSessionCustom.getCurrencyCode(key);
            }

            msg += "\n\n(Partidas sumadas = " + SLibUtils.DecimalFormatInteger.format(rows.length) + ")";

            miClient.showMsgBoxInformation(msg);
        }
    }

    private void actionToggleRecordEntries() {
        renderRecordEntries();
    }

    private void actionGridRecordEntriesNew() {

    }

    private void actionGridRecordEntriesEdit() {
        SGridRow rowSelected = null;
        SDataRecordEntry entrySelected = null;
        int mode = SLibConsts.UNDEFINED;
        int[] keyBkkNumber = null;
        int[] keySysMoveType = null;
        SDataRecordEntry[] entries = null;
        ArrayList<SDataRecordEntry> entriesToEdit = new ArrayList<SDataRecordEntry>();

        if (moGridRecordEntries.getTable().getSelectedRowCount() != 1) {
            miClient.showMsgBoxInformation(SGridConsts.MSG_SELECT_ROW);
        }
        else {
            rowSelected = moGridRecordEntries.getSelectedGridRow();

            if (rowSelected.isRowSystem()) {
                miClient.showMsgBoxWarning(SDbConsts.MSG_REG_ + rowSelected.getRowName() + SDbConsts.MSG_REG_IS_SYSTEM);
            }
            else {
                entrySelected = (SDataRecordEntry) rowSelected;
                keyBkkNumber = entrySelected.getKeyBookkeepingNumber();

                if (keyBkkNumber[0] == SLibConsts.UNDEFINED && keyBkkNumber[1] == SLibConsts.UNDEFINED) {
                    entriesToEdit.add(entrySelected);
                }
                else {
                    for (SDataRecordEntry entry : moRecordXXX.getDbmsRecordEntries()) {
                        if (SLibUtils.compareKeys(keyBkkNumber, entry.getKeyBookkeepingNumber())) {
                            entriesToEdit.add(entry);
                        }
                    }
                }

                keySysMoveType = entrySelected.getKeySystemMoveType();
                if (SFinUtils.isSysMoveTypeForTransfer(keySysMoveType)) {
                    mode = SDialogCashMove.MOVE_MODE_TRANSFER;
                }
                else if (SFinUtils.isSysMoveTypeForExchangeRateDiff(keySysMoveType)) {
                    mode = SDialogCashMove.MOVE_MODE_SIMPLE_EXC_RATE_DIFF;
                }
                else {
                    mode = entriesToEdit.size() == 1 ? SDialogCashMove.MOVE_MODE_SINGLE : SDialogCashMove.MOVE_MODE_SIMPLE;
                }

                entries = new SDataRecordEntry[entriesToEdit.size()];
                for (int i = 0; i < entriesToEdit.size(); i++) {
                    entries[i] = entriesToEdit.get(i);
                }

                actionMove(keySysMoveType, mode, 0, entries);
            }
        }
    }

    private void actionGridRecordEntriesDelete() {
        int index = -1;
        SGridRow[] rowsSelected = null;
        boolean deleted = false;
        SDataRecordEntry entrySelected = null;
        int[] keyBkkNumber = null;
        ArrayList<SDataRecordEntry> entriesToDelete = new ArrayList<SDataRecordEntry>();

        if (moGridRecordEntries.getTable().getSelectedRowCount() == 0) {
            miClient.showMsgBoxInformation(SGridConsts.MSG_SELECT_ROWS);
        }
        else if (miClient.showMsgBoxConfirm(SGridConsts.MSG_CONFIRM_REG_DEL) == JOptionPane.YES_OPTION) {
            index = moGridRecordEntries.getTable().getSelectedRow();
            rowsSelected = moGridRecordEntries.getSelectedGridRows();

            for (SGridRow rowSelected : rowsSelected) {
                entrySelected = (SDataRecordEntry) rowSelected;
                keyBkkNumber = entrySelected.getKeyBookkeepingNumber();

                if (rowSelected.isRowSystem() && !isUserRecordEntrySelected(keyBkkNumber, rowsSelected)) {
                    miClient.showMsgBoxWarning(SDbConsts.MSG_REG_ + rowSelected.getRowName() + SDbConsts.MSG_REG_IS_SYSTEM);
                }
                else if (!rowSelected.isRowDeletable() && !isUserRecordEntrySelected(keyBkkNumber, rowsSelected)) {
                    miClient.showMsgBoxWarning(SDbConsts.MSG_REG_ + rowSelected.getRowName() + SDbConsts.MSG_REG_NON_DELETABLE);
                }
                else {
                    deleted = true;

                    for (SDataRecordEntry entry : moRecordXXX.getDbmsRecordEntries()) {
                        if (SLibUtils.compareKeys(entry.getKeyBookkeepingNumber(), keyBkkNumber)) {
                            if (entry.getIsRegistryNew()) {
                                entriesToDelete.add(entry);
                            }
                            else {
                                entry.setIsDeleted(true);
                                entry.setIsRegistryEdited(true);
                            }
                        }
                    }
                }
            }

            if (deleted) {
                for (SDataRecordEntry entry : entriesToDelete) {
                    moRecordXXX.getDbmsRecordEntries().remove(entry);
                }

                renderRecordEntries();
                moGridRecordEntries.setSelectedGridRow(index < moGridRecordEntries.getTable().getRowCount() ? index : moGridRecordEntries.getTable().getRowCount() - 1);

                computeBalanceRecord();
                computeBalanceCash();
            }
        }
    }

    /*
     * Public methods
     */

    public void setFormData(SDataRecord record) throws Exception {
        removeAllListeners();

        moRecordXXX = record;
        moCashXXX = record.getDbmsDataAccountCash();
        moAbpCash = moSessionCustom.getAbpEntity((int[]) moCashXXX.getPrimaryKey());

        if (moAbpCash == null) {
            throw new Exception(SFinConsts.MSG_ERR_ABP_ENT_NOT_FOUND + "'" + moCashXXX.getAuxEntity() + "'.");
        }

        manCashCurrencyKey = new int[] { moCashXXX.getFkCurrencyId() };
        mbCashLocalCurrency = moSessionCustom.isLocalCurrency(manCashCurrencyKey);

        moDialogCashMoveBizPartnerMi.setMoveCash(moCashXXX, moAbpCash);
        moDialogCashMoveBizPartnerMo.setMoveCash(moCashXXX, moAbpCash);
        moDialogCashMoveMi.setMoveCash(moCashXXX, moAbpCash);
        moDialogCashMoveMo.setMoveCash(moCashXXX, moAbpCash);

        if (moRecordXXX.getIsRegistryNew()) {
            throw new Exception(SGuiConsts.ERR_MSG_FORM_EXIST_REG);
        }
        else {
            jtfRegistryKey.setText(moRecordXXX.getPkYearId() + "-" + moRecordXXX.getPkPeriodId() + "-" + moRecordXXX.getPkBookkeepingCenterId() + "-" + moRecordXXX.getPkRecordTypeId() + "-" + moRecordXXX.getPkNumberId());
        }

        setFormEditable(true);

        renderRecord();
        renderCash();

        computeBalanceRecord();
        computeBalanceCash();

        addAllListeners();
    }

    /*
     * Overriden methods
     */

    @Override
    public void addAllListeners() {
        jbMiBizPartnerCus.addActionListener(this);
        jbMiBizPartnerCusAdv.addActionListener(this);
        jbMiBizPartnerSup.addActionListener(this);
        jbMiBizPartnerSupAdv.addActionListener(this);
        jbMiBizPartnerDbr.addActionListener(this);
        jbMiBizPartnerCdr.addActionListener(this);
        jbMiTransfer.addActionListener(this);
        jbMiInvestment.addActionListener(this);
        jbMiOwnersEquity.addActionListener(this);
        jbMiFinance.addActionListener(this);
        jbMiExchangeRateDiff.addActionListener(this);
        jbMiAdjustment.addActionListener(this);
        jbMiOther.addActionListener(this);
        jbMoBizPartnerCus.addActionListener(this);
        jbMoBizPartnerCusAdv.addActionListener(this);
        jbMoBizPartnerSup.addActionListener(this);
        jbMoBizPartnerSupAdv.addActionListener(this);
        jbMoBizPartnerDbr.addActionListener(this);
        jbMoBizPartnerCdr.addActionListener(this);
        jbMoTransfer.addActionListener(this);
        jbMoInvestment.addActionListener(this);
        jbMoOwnersEquity.addActionListener(this);
        jbMoFinance.addActionListener(this);
        jbMoExchangeRateDiff.addActionListener(this);
        jbMoAdjustment.addActionListener(this);
        jbMoOther.addActionListener(this);
        mjToggleRecordEntries.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbMiBizPartnerCus.removeActionListener(this);
        jbMiBizPartnerCusAdv.removeActionListener(this);
        jbMiBizPartnerSup.removeActionListener(this);
        jbMiBizPartnerSupAdv.removeActionListener(this);
        jbMiBizPartnerDbr.removeActionListener(this);
        jbMiBizPartnerCdr.removeActionListener(this);
        jbMiTransfer.removeActionListener(this);
        jbMiInvestment.removeActionListener(this);
        jbMiOwnersEquity.removeActionListener(this);
        jbMiFinance.removeActionListener(this);
        jbMiExchangeRateDiff.removeActionListener(this);
        jbMiAdjustment.removeActionListener(this);
        jbMiOther.removeActionListener(this);
        jbMoBizPartnerCus.removeActionListener(this);
        jbMoBizPartnerCusAdv.removeActionListener(this);
        jbMoBizPartnerSup.removeActionListener(this);
        jbMoBizPartnerSupAdv.removeActionListener(this);
        jbMoBizPartnerDbr.removeActionListener(this);
        jbMoBizPartnerCdr.removeActionListener(this);
        jbMoTransfer.removeActionListener(this);
        jbMoInvestment.removeActionListener(this);
        jbMoOwnersEquity.removeActionListener(this);
        jbMoFinance.removeActionListener(this);
        jbMoExchangeRateDiff.removeActionListener(this);
        jbMoAdjustment.removeActionListener(this);
        jbMoOther.removeActionListener(this);
        mjToggleRecordEntries.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SGuiValidation validateForm() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void notifyRowNew(int gridType, int gridSubtype, int row, SGridRow gridRow) {

    }

    @Override
    public void notifyRowEdit(int gridType, int gridSubtype, int row, SGridRow gridRow) {

    }

    @Override
    public void notifyRowDelete(int gridType, int gridSubtype, int row, SGridRow gridRow) {

    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbMiBizPartnerCus) {
                actionMove(SModSysConsts.FINS_TP_SYS_MOV_MI_CUS_PAY, SLibConsts.UNDEFINED, mbCashLocalCurrency ? 1 : 0, null);
            }
            else if (button == jbMiBizPartnerCusAdv) {
                actionMove(SModSysConsts.FINS_TP_SYS_MOV_MI_CUS_ADV, SLibConsts.UNDEFINED, mbCashLocalCurrency ? 1 : 0, null);
            }
            else if (button == jbMiBizPartnerSup) {
                actionMove(SModSysConsts.FINS_TP_SYS_MOV_MI_SUP_PAY, SLibConsts.UNDEFINED, mbCashLocalCurrency ? 1 : 0, null);
            }
            else if (button == jbMiBizPartnerSupAdv) {
                actionMove(SModSysConsts.FINS_TP_SYS_MOV_MI_SUP_ADV, SLibConsts.UNDEFINED, mbCashLocalCurrency ? 1 : 0, null);
            }
            else if (button == jbMiBizPartnerDbr) {
                actionMove(SModSysConsts.FINS_TP_SYS_MOV_MI_DBR_PAY, SLibConsts.UNDEFINED, mbCashLocalCurrency ? 1 : 0, null);
            }
            else if (button == jbMiBizPartnerCdr) {
                actionMove(SModSysConsts.FINS_TP_SYS_MOV_MI_CDR_PAY, SLibConsts.UNDEFINED, mbCashLocalCurrency ? 1 : 0, null);
            }
            else if (button == jbMiTransfer) {
                actionMove(SModSysConsts.FINS_TP_SYS_MOV_MI_TRA, SDialogCashMove.MOVE_MODE_TRANSFER, mbCashLocalCurrency ? 1 : 0, null);    // not used, just for consistence
            }
            else if (button == jbMiInvestment) {
                actionMove(SModSysConsts.FINS_TP_SYS_MOV_MI_INV, SDialogCashMove.MOVE_MODE_SIMPLE, mbCashLocalCurrency ? 1 : 0, null);
            }
            else if (button == jbMiOwnersEquity) {
                actionMove(SModSysConsts.FINS_TP_SYS_MOV_MI_EQY, SDialogCashMove.MOVE_MODE_SIMPLE, mbCashLocalCurrency ? 1 : 0, null);
            }
            else if (button == jbMiFinance) {
                actionMove(SModSysConsts.FINS_TP_SYS_MOV_MI_FIN, SDialogCashMove.MOVE_MODE_SIMPLE, mbCashLocalCurrency ? 1 : 0, null);
            }
            else if (button == jbMiAdjustment) {
                actionMove(SModSysConsts.FINS_TP_SYS_MOV_MI_ADJ, SDialogCashMove.MOVE_MODE_SIMPLE, mbCashLocalCurrency ? 1 : 0, null);
            }
            else if (button == jbMiExchangeRateDiff) {
                actionMove(SModSysConsts.FINS_TP_SYS_MOV_MI_EXR, SDialogCashMove.MOVE_MODE_SIMPLE_EXC_RATE_DIFF, 0, null);  // on differences, exchange rate is always 0!
            }
            else if (button == jbMiOther) {
                actionMove(SModSysConsts.FINS_TP_SYS_MOV_MI_ADJ, SDialogCashMove.MOVE_MODE_SINGLE, mbCashLocalCurrency ? 1 : 0, null);
            }
            else if (button == jbMoBizPartnerCus) {
                actionMove(SModSysConsts.FINS_TP_SYS_MOV_MO_CUS_PAY, SLibConsts.UNDEFINED, mbCashLocalCurrency ? 1 : moDecExchangeRate.getValue(), null);
            }
            else if (button == jbMoBizPartnerCusAdv) {
                actionMove(SModSysConsts.FINS_TP_SYS_MOV_MO_CUS_ADV, SLibConsts.UNDEFINED, mbCashLocalCurrency ? 1 : moDecExchangeRate.getValue(), null);
            }
            else if (button == jbMoBizPartnerSup) {
                actionMove(SModSysConsts.FINS_TP_SYS_MOV_MO_SUP_PAY, SLibConsts.UNDEFINED, mbCashLocalCurrency ? 1 : moDecExchangeRate.getValue(), null);
            }
            else if (button == jbMoBizPartnerSupAdv) {
                actionMove(SModSysConsts.FINS_TP_SYS_MOV_MO_SUP_ADV, SLibConsts.UNDEFINED, mbCashLocalCurrency ? 1 : moDecExchangeRate.getValue(), null);
            }
            else if (button == jbMoBizPartnerDbr) {
                actionMove(SModSysConsts.FINS_TP_SYS_MOV_MO_DBR_PAY, SLibConsts.UNDEFINED, mbCashLocalCurrency ? 1 : moDecExchangeRate.getValue(), null);
            }
            else if (button == jbMoBizPartnerCdr) {
                actionMove(SModSysConsts.FINS_TP_SYS_MOV_MO_CDR_PAY, SLibConsts.UNDEFINED, mbCashLocalCurrency ? 1 : moDecExchangeRate.getValue(), null);
            }
            else if (button == jbMoTransfer) {
                actionMove(SModSysConsts.FINS_TP_SYS_MOV_MO_TRA, SDialogCashMove.MOVE_MODE_TRANSFER, mbCashLocalCurrency ? 1 : moDecExchangeRate.getValue(), null);
            }
            else if (button == jbMoInvestment) {
                actionMove(SModSysConsts.FINS_TP_SYS_MOV_MO_INV, SDialogCashMove.MOVE_MODE_SIMPLE, mbCashLocalCurrency ? 1 : moDecExchangeRate.getValue(), null);
            }
            else if (button == jbMoOwnersEquity) {
                actionMove(SModSysConsts.FINS_TP_SYS_MOV_MO_EQY, SDialogCashMove.MOVE_MODE_SIMPLE, mbCashLocalCurrency ? 1 : moDecExchangeRate.getValue(), null);
            }
            else if (button == jbMoFinance) {
                actionMove(SModSysConsts.FINS_TP_SYS_MOV_MO_FIN, SDialogCashMove.MOVE_MODE_SIMPLE, mbCashLocalCurrency ? 1 : moDecExchangeRate.getValue(), null);
            }
            else if (button == jbMoAdjustment) {
                actionMove(SModSysConsts.FINS_TP_SYS_MOV_MO_ADJ, SDialogCashMove.MOVE_MODE_SIMPLE, mbCashLocalCurrency ? 1 : moDecExchangeRate.getValue(), null);
            }
            else if (button == jbMoExchangeRateDiff) {
                actionMove(SModSysConsts.FINS_TP_SYS_MOV_MO_EXR, SDialogCashMove.MOVE_MODE_SIMPLE_EXC_RATE_DIFF, 0, null);  // on differences, exchange rate is always 0!
            }
            else if (button == jbMoOther) {
                actionMove(SModSysConsts.FINS_TP_SYS_MOV_MO_ADJ, SDialogCashMove.MOVE_MODE_SINGLE, mbCashLocalCurrency ? 1 : moDecExchangeRate.getValue(), null);
            }
            else if (button == mjSumRecordEntries) {
                actionSumRecordEntries();
            }
        }
        else if (e.getSource() instanceof JToggleButton) {
            JToggleButton toggleButton = (JToggleButton) e.getSource();

            if (toggleButton == mjToggleRecordEntries) {
                actionToggleRecordEntries();
            }
        }
    }
}

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Countries.java
 *
 * Created on 12/08/2009, 09:12:29 AM
 */

package erp.mloc.form;

import erp.data.SDataConstants;
import erp.data.SDataUtilities;
import erp.data.SProcConstants;
import erp.lib.SLibConstants;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mloc.data.SDataCountry;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;
import sa.lib.gui.SGuiUtils;

/**
 *
 * @author Alfonso Flores, Juan Barajas
 */
public class SFormCountry extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mloc.data.SDataCountry moCountry;
    private erp.lib.form.SFormField moFieldKey;
    private erp.lib.form.SFormField moFieldCountry;
    private erp.lib.form.SFormField moFieldCountryAbbr;
    private erp.lib.form.SFormField moFieldCountryCode;
    private erp.lib.form.SFormField moFieldCountryGroup;
    private erp.lib.form.SFormField moFieldIsDeleted;

    /** Creates new form Countries */
    public SFormCountry(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.LOCU_CTY;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlKey = new javax.swing.JLabel();
        jftKey = new javax.swing.JFormattedTextField();
        jlCountry = new javax.swing.JLabel();
        jtfCountry = new javax.swing.JTextField();
        jlCountryAbbr = new javax.swing.JLabel();
        jtfCountryAbbr = new javax.swing.JTextField();
        jlCountryCode = new javax.swing.JLabel();
        jtfCountryCode = new javax.swing.JTextField();
        jlCountryGroup = new javax.swing.JLabel();
        moTextCountryGroup = new sa.lib.gui.bean.SBeanFieldText();
        jckIsDeleted = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("País");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setPreferredSize(new java.awt.Dimension(400, 215));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.GridLayout(7, 2, 5, 5));

        jlKey.setText("Clave: *");
        jPanel3.add(jlKey);

        jftKey.setText("CLAVE");
        jPanel3.add(jftKey);

        jlCountry.setText("País: *");
        jPanel3.add(jlCountry);

        jtfCountry.setText("NOMBRE");
        jPanel3.add(jtfCountry);

        jlCountryAbbr.setText("Abreviatura: *");
        jPanel3.add(jlCountryAbbr);

        jtfCountryAbbr.setText("ABREVIATURA");
        jPanel3.add(jtfCountryAbbr);

        jlCountryCode.setText("Código de país:");
        jPanel3.add(jlCountryCode);

        jtfCountryCode.setText("CÓDIGO");
        jPanel3.add(jtfCountryCode);

        jlCountryGroup.setText("Código del grupo:");
        jPanel3.add(jlCountryGroup);

        moTextCountryGroup.setText("sBeanFieldText1");
        jPanel3.add(moTextCountryGroup);

        jckIsDeleted.setText("Registro eliminado");
        jckIsDeleted.setPreferredSize(new java.awt.Dimension(1000, 23));
        jPanel3.add(jckIsDeleted);

        jPanel2.add(jPanel3, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel1.setMinimumSize(new java.awt.Dimension(161, 33));
        jPanel1.setPreferredSize(new java.awt.Dimension(165, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel1.add(jbCancel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(400, 300));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();

        moFieldKey = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, miClient.getSessionXXX().getParamsErp().getIsKeyLocalityApplying(), jftKey, jlKey);
        moFieldKey.setLengthMax(25);
        moFieldKey.setMaskFormatter(miClient.getSessionXXX().getParamsErp().getFormatKeyCountry());
        moFieldCountry = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfCountry, jlCountry);
        moFieldCountry.setLengthMax(100);
        moFieldCountryAbbr = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfCountryAbbr, jlCountryAbbr);
        moFieldCountryAbbr.setLengthMax(25);
        moFieldCountryCode = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfCountryCode, jlCountryCode);
        moFieldCountryCode.setLengthMax(10);
        moFieldCountryGroup = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, moTextCountryGroup.getComponent(), jlCountryGroup);
        moFieldCountryGroup.setLengthMax(25);
        moTextCountryGroup.setTextSettings(SGuiUtils.getLabelName(jlCountryGroup.getText()), 25);
        moFieldIsDeleted = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsDeleted);

        mvFields.add(moFieldKey);
        mvFields.add(moFieldCountry);
        mvFields.add(moFieldCountryAbbr);
        mvFields.add(moFieldCountryCode);
        mvFields.add(moFieldCountryGroup);
        mvFields.add(moFieldIsDeleted);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction action = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), action, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            if (!miClient.getSessionXXX().getParamsErp().getIsKeyLocalityApplying()) {
                jtfCountry.requestFocus();
            }
            else {
                jftKey.requestFocus();
            }
        }
    }

    private void actionOk() {
        erp.lib.form.SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    private void renderKey() {
        if (!miClient.getSessionXXX().getParamsErp().getIsKeyLocalityApplying()) {
            jftKey.setEnabled(false);
        }
        else {
            jftKey.setEnabled(true);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOk;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JFormattedTextField jftKey;
    private javax.swing.JLabel jlCountry;
    private javax.swing.JLabel jlCountryAbbr;
    private javax.swing.JLabel jlCountryCode;
    private javax.swing.JLabel jlCountryGroup;
    private javax.swing.JLabel jlKey;
    private javax.swing.JTextField jtfCountry;
    private javax.swing.JTextField jtfCountryAbbr;
    private javax.swing.JTextField jtfCountryCode;
    private sa.lib.gui.bean.SBeanFieldText moTextCountryGroup;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moCountry = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        renderKey();
        jckIsDeleted.setEnabled(false);
    }

    @Override
    public void formRefreshCatalogues() {
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            if (miClient.getSessionXXX().getParamsErp().getIsKeyLocalityApplying()) {
                Object[] oParamsIn = new Object[] { moCountry == null ? 0 : moCountry.getPkCountryId(), moFieldKey.getString() };

                if (SDataUtilities.callProcedureVal(miClient, SProcConstants.LOCU_CTRY_VAL, oParamsIn, SLibConstants.EXEC_MODE_VERBOSE) > 0) {
                    validation.setMessage("El valor del campo '" + jlKey.getText() + "' ya existe.");
                    validation.setComponent(jftKey);
                }
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        moCountry = (erp.mloc.data.SDataCountry) registry;

        moFieldKey.setFieldValue(moCountry.getKey());
        moFieldCountry.setFieldValue(moCountry.getCountry());
        moFieldCountryAbbr.setFieldValue(moCountry.getCountryAbbr());
        moFieldCountryCode.setFieldValue(moCountry.getCountryCode());
        moTextCountryGroup.setValue(moCountry.getCountryGroup());
        moFieldIsDeleted.setFieldValue(moCountry.getIsDeleted());

        renderKey();
        jckIsDeleted.setEnabled(true);
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        if (moCountry == null) {
            moCountry = new SDataCountry();
            moCountry.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        }
        else {
            moCountry.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        }

        moCountry.setKey(moFieldKey.getString());
        moCountry.setCountry(moFieldCountry.getString());
        moCountry.setCountryAbbr(moFieldCountryAbbr.getString());
        moCountry.setCountryCode(moFieldCountryCode.getString());
        moCountry.setCountryGroup(moTextCountryGroup.getValue());
        moCountry.setIsDeleted(moFieldIsDeleted.getBoolean());

        return moCountry;
    }

    @Override
    public void setValue(int type, Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
        }
    }
}
